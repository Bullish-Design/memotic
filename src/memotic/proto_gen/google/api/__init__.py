
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: google/api/annotations.proto, google/api/client.proto, google/api/field_behavior.proto, google/api/http.proto, google/api/httpbody.proto, google/api/launch_stage.proto, google/api/resource.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("ClientLibraryDestination","ClientLibraryOrganization","FieldBehavior","LaunchStage","ResourceDescriptorHistory","ResourceDescriptorStyle","ClientLibrarySettings","CommonLanguageSettings","CppSettings","CustomHttpPattern","DotnetSettings","GoSettings","Http","HttpBody","HttpRule","JavaSettings","MethodSettings","MethodSettingsLongRunning","NodeSettings","PhpSettings","Publishing","PythonSettings","PythonSettingsExperimentalFeatures","ResourceDescriptor","ResourceReference","RubySettings","SelectiveGapicGeneration",)

import re
import builtins
import datetime
import dateutil.parser
import warnings
from collections.abc import AsyncIterable, AsyncIterator, Iterable, Iterator
import typing
from typing import TYPE_CHECKING

from dataclasses import dataclass

import betterproto2
from betterproto2.grpc.grpclib_server import ServiceBase
import grpc
import grpclib
from google.protobuf.descriptor import Descriptor, EnumDescriptor

from ...message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION="0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)
class ClientLibraryDestination(betterproto2.Enum):
    """
    To where should client libraries be published?
    """


    CLIENT_LIBRARY_DESTINATION_UNSPECIFIED = 0
    """
    Client libraries will neither be generated nor published to package
    managers.
    """

    GITHUB = 10
    """
    Generate the client library in a repo under github.com/googleapis,
    but don't publish it to package managers.
    """

    PACKAGE_MANAGER = 20
    """
    Publish the library to package managers like nuget.org and npmjs.com.
    """




class ClientLibraryOrganization(betterproto2.Enum):
    """
    The organization for which the client libraries are being published.
    Affects the url where generated docs are published, etc.
    """


    CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED = 0
    """
    Not useful.
    """

    CLOUD = 1
    """
    Google Cloud Platform Org.
    """

    ADS = 2
    """
    Ads (Advertising) Org.
    """

    PHOTOS = 3
    """
    Photos Org.
    """

    STREET_VIEW = 4
    """
    Street View Org.
    """

    SHOPPING = 5
    """
    Shopping Org.
    """

    GEO = 6
    """
    Geo Org.
    """

    GENERATIVE_AI = 7
    """
    Generative AI - https://developers.generativeai.google
    """




class FieldBehavior(betterproto2.Enum):
    """
    An indicator of the behavior of a given field (for example, that a field
    is required in requests, or given as output but ignored as input).
    This **does not** change the behavior in protocol buffers itself; it only
    denotes the behavior and may affect how API tooling handles the field.

    Note: This enum **may** receive new values in the future.
    """


    FIELD_BEHAVIOR_UNSPECIFIED = 0
    """
    Conventional default for enums. Do not use this.
    """

    OPTIONAL = 1
    """
    Specifically denotes a field as optional.
    While all fields in protocol buffers are optional, this may be specified
    for emphasis if appropriate.
    """

    REQUIRED = 2
    """
    Denotes a field as required.
    This indicates that the field **must** be provided as part of the request,
    and failure to do so will cause an error (usually `INVALID_ARGUMENT`).
    """

    OUTPUT_ONLY = 3
    """
    Denotes a field as output only.
    This indicates that the field is provided in responses, but including the
    field in a request does nothing (the server *must* ignore it and
    *must not* throw an error as a result of the field's presence).
    """

    INPUT_ONLY = 4
    """
    Denotes a field as input only.
    This indicates that the field is provided in requests, and the
    corresponding field is not included in output.
    """

    IMMUTABLE = 5
    """
    Denotes a field as immutable.
    This indicates that the field may be set once in a request to create a
    resource, but may not be changed thereafter.
    """

    UNORDERED_LIST = 6
    """
    Denotes that a (repeated) field is an unordered list.
    This indicates that the service may provide the elements of the list
    in any arbitrary  order, rather than the order the user originally
    provided. Additionally, the list's order may or may not be stable.
    """

    NON_EMPTY_DEFAULT = 7
    """
    Denotes that this field returns a non-empty default value if not set.
    This indicates that if the user provides the empty value in a request,
    a non-empty value will be returned. The user will not be aware of what
    non-empty value to expect.
    """

    IDENTIFIER = 8
    """
    Denotes that the field in a resource (a message annotated with
    google.api.resource) is used in the resource name to uniquely identify the
    resource. For AIP-compliant APIs, this should only be applied to the
    `name` field on the resource.

    This behavior should not be applied to references to other resources within
    the message.

    The identifier field of resources often have different field behavior
    depending on the request it is embedded in (e.g. for Create methods name
    is optional and unused, while for Update methods it is required). Instead
    of method-specific annotations, only `IDENTIFIER` is required.
    """




class LaunchStage(betterproto2.Enum):
    """
    The launch stage as defined by [Google Cloud Platform
    Launch Stages](https://cloud.google.com/terms/launch-stages).
    """


    LAUNCH_STAGE_UNSPECIFIED = 0
    """
    Do not use this default value.
    """

    UNIMPLEMENTED = 6
    """
    The feature is not yet implemented. Users can not use it.
    """

    PRELAUNCH = 7
    """
    Prelaunch features are hidden from users and are only visible internally.
    """

    EARLY_ACCESS = 1
    """
    Early Access features are limited to a closed group of testers. To use
    these features, you must sign up in advance and sign a Trusted Tester
    agreement (which includes confidentiality provisions). These features may
    be unstable, changed in backward-incompatible ways, and are not
    guaranteed to be released.
    """

    ALPHA = 2
    """
    Alpha is a limited availability test for releases before they are cleared
    for widespread use. By Alpha, all significant design issues are resolved
    and we are in the process of verifying functionality. Alpha customers
    need to apply for access, agree to applicable terms, and have their
    projects allowlisted. Alpha releases don't have to be feature complete,
    no SLAs are provided, and there are no technical support obligations, but
    they will be far enough along that customers can actually use them in
    test environments or for limited-use tests -- just like they would in
    normal production cases.
    """

    BETA = 3
    """
    Beta is the point at which we are ready to open a release for any
    customer to use. There are no SLA or technical support obligations in a
    Beta release. Products will be complete from a feature perspective, but
    may have some open outstanding issues. Beta releases are suitable for
    limited production use cases.
    """

    GA = 4
    """
    GA features are open to all developers and are considered stable and
    fully qualified for production use.
    """

    DEPRECATED = 5
    """
    Deprecated features are scheduled to be shut down and removed. For more
    information, see the "Deprecation Policy" section of our [Terms of
    Service](https://cloud.google.com/terms/)
    and the [Google Cloud Platform Subject to the Deprecation
    Policy](https://cloud.google.com/terms/deprecation) documentation.
    """




class ResourceDescriptorHistory(betterproto2.Enum):
    """
    A description of the historical or future-looking state of the
    resource pattern.
    """


    HISTORY_UNSPECIFIED = 0
    """
    The "unset" value.
    """

    ORIGINALLY_SINGLE_PATTERN = 1
    """
    The resource originally had one pattern and launched as such, and
    additional patterns were added later.
    """

    FUTURE_MULTI_PATTERN = 2
    """
    The resource has one pattern, but the API owner expects to add more
    later. (This is the inverse of ORIGINALLY_SINGLE_PATTERN, and prevents
    that from being necessary once there are multiple patterns.)
    """




class ResourceDescriptorStyle(betterproto2.Enum):
    """
    A flag representing a specific style that a resource claims to conform to.
    """


    STYLE_UNSPECIFIED = 0
    """
    The unspecified value. Do not use.
    """

    DECLARATIVE_FRIENDLY = 1
    """
    This resource is intended to be "declarative-friendly".

    Declarative-friendly resources must be more strictly consistent, and
    setting this to true communicates to tools that this resource should
    adhere to declarative-friendly expectations.

    Note: This is used by the API linter (linter.aip.dev) to enable
    additional checks.
    """




@dataclass(eq=False, repr=False)
class ClientLibrarySettings(betterproto2.Message):
    """
    Details about how and where to publish client libraries.
    """


    version: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Version of the API to apply these settings to. This is the full protobuf
    package for the API, ending in the version element.
    Examples: "google.cloud.speech.v1" and "google.spanner.admin.database.v1".
    """

    launch_stage: "LaunchStage" = betterproto2.field(2, betterproto2.TYPE_ENUM, default_factory=lambda: LaunchStage(0))
    """
    Launch stage of this version of the API.
    """

    rest_numeric_enums: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    When using transport=rest, the client request will encode enums as
    numbers rather than strings.
    """

    java_settings: "JavaSettings | None" = betterproto2.field(21, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Settings for legacy Java features, supported in the Service YAML.
    """

    cpp_settings: "CppSettings | None" = betterproto2.field(22, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Settings for C++ client libraries.
    """

    php_settings: "PhpSettings | None" = betterproto2.field(23, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Settings for PHP client libraries.
    """

    python_settings: "PythonSettings | None" = betterproto2.field(24, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Settings for Python client libraries.
    """

    node_settings: "NodeSettings | None" = betterproto2.field(25, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Settings for Node client libraries.
    """

    dotnet_settings: "DotnetSettings | None" = betterproto2.field(26, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Settings for .NET client libraries.
    """

    ruby_settings: "RubySettings | None" = betterproto2.field(27, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Settings for Ruby client libraries.
    """

    go_settings: "GoSettings | None" = betterproto2.field(28, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Settings for Go client libraries.
    """





default_message_pool.register_message("google.api", "ClientLibrarySettings", ClientLibrarySettings)


@dataclass(eq=False, repr=False)
class CommonLanguageSettings(betterproto2.Message):
    """
    Required information for every language.
    """


    reference_docs_uri: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Link to automatically generated reference documentation.  Example:
    https://cloud.google.com/nodejs/docs/reference/asset/latest
    """

    destinations: "list[ClientLibraryDestination]" = betterproto2.field(2, betterproto2.TYPE_ENUM, repeated=True)
    """
    The destination where API teams want this client library to be published.
    """

    selective_gapic_generation: "SelectiveGapicGeneration | None" = betterproto2.field(3, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Configuration for which RPCs should be generated in the GAPIC client.
    """



    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("reference_docs_uri"):
            warnings.warn("CommonLanguageSettings.reference_docs_uri is deprecated", DeprecationWarning)


default_message_pool.register_message("google.api", "CommonLanguageSettings", CommonLanguageSettings)


@dataclass(eq=False, repr=False)
class CppSettings(betterproto2.Message):
    """
    Settings for C++ client libraries.
    """


    common: "CommonLanguageSettings | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Some settings.
    """





default_message_pool.register_message("google.api", "CppSettings", CppSettings)


@dataclass(eq=False, repr=False)
class CustomHttpPattern(betterproto2.Message):
    """
    A custom pattern is used for defining custom HTTP verb.
    """


    kind: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of this custom HTTP verb.
    """

    path: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The path matched by this custom verb.
    """





default_message_pool.register_message("google.api", "CustomHttpPattern", CustomHttpPattern)


@dataclass(eq=False, repr=False)
class DotnetSettings(betterproto2.Message):
    """
    Settings for Dotnet client libraries.
    """


    common: "CommonLanguageSettings | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Some settings.
    """

    renamed_services: "dict[str, str]" = betterproto2.field(2, betterproto2.TYPE_MAP, map_meta=betterproto2.map_meta(betterproto2.TYPE_STRING, betterproto2.TYPE_STRING))
    """
    Map from original service names to renamed versions.
    This is used when the default generated types
    would cause a naming conflict. (Neither name is
    fully-qualified.)
    Example: Subscriber to SubscriberServiceApi.
    """

    renamed_resources: "dict[str, str]" = betterproto2.field(3, betterproto2.TYPE_MAP, map_meta=betterproto2.map_meta(betterproto2.TYPE_STRING, betterproto2.TYPE_STRING))
    """
    Map from full resource types to the effective short name
    for the resource. This is used when otherwise resource
    named from different services would cause naming collisions.
    Example entry:
    "datalabeling.googleapis.com/Dataset": "DataLabelingDataset"
    """

    ignored_resources: "list[str]" = betterproto2.field(4, betterproto2.TYPE_STRING, repeated=True)
    """
    List of full resource types to ignore during generation.
    This is typically used for API-specific Location resources,
    which should be handled by the generator as if they were actually
    the common Location resources.
    Example entry: "documentai.googleapis.com/Location"
    """

    forced_namespace_aliases: "list[str]" = betterproto2.field(5, betterproto2.TYPE_STRING, repeated=True)
    """
    Namespaces which must be aliased in snippets due to
    a known (but non-generator-predictable) naming collision
    """

    handwritten_signatures: "list[str]" = betterproto2.field(6, betterproto2.TYPE_STRING, repeated=True)
    """
    Method signatures (in the form "service.method(signature)")
    which are provided separately, so shouldn't be generated.
    Snippets *calling* these methods are still generated, however.
    """





default_message_pool.register_message("google.api", "DotnetSettings", DotnetSettings)


@dataclass(eq=False, repr=False)
class GoSettings(betterproto2.Message):
    """
    Settings for Go client libraries.
    """


    common: "CommonLanguageSettings | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Some settings.
    """

    renamed_services: "dict[str, str]" = betterproto2.field(2, betterproto2.TYPE_MAP, map_meta=betterproto2.map_meta(betterproto2.TYPE_STRING, betterproto2.TYPE_STRING))
    """
    Map of service names to renamed services. Keys are the package relative
    service names and values are the name to be used for the service client
    and call options.

    publishing:
      go_settings:
        renamed_services:
          Publisher: TopicAdmin
    """





default_message_pool.register_message("google.api", "GoSettings", GoSettings)


@dataclass(eq=False, repr=False)
class Http(betterproto2.Message):
    """
    Defines the HTTP configuration for an API service. It contains a list of
    [HttpRule][google.api.HttpRule], each specifying the mapping of an RPC method
    to one or more HTTP REST API methods.
    """


    rules: "list[HttpRule]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    A list of HTTP configuration rules that apply to individual API methods.

    **NOTE:** All service configuration rules follow "last one wins" order.
    """

    fully_decode_reserved_expansion: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    When set to true, URL path parameters will be fully URI-decoded except in
    cases of single segment matches in reserved expansion, where "%2F" will be
    left encoded.

    The default behavior is to not decode RFC 6570 reserved characters in multi
    segment matches.
    """





default_message_pool.register_message("google.api", "Http", Http)


@dataclass(eq=False, repr=False)
class HttpBody(betterproto2.Message):
    """
    Message that represents an arbitrary HTTP body. It should only be used for
    payload formats that can't be represented as JSON, such as raw binary or
    an HTML page.

    This message can be used both in streaming and non-streaming API methods in
    the request as well as the response.

    It can be used as a top-level request field, which is convenient if one
    wants to extract parameters from either the URL or HTTP template into the
    request fields and also want access to the raw HTTP body.

    Example:

        message GetResourceRequest {
          // A unique request id.
          string request_id = 1;

          // The raw HTTP body is bound to this field.
          google.api.HttpBody http_body = 2;

        }

        service ResourceService {
          rpc GetResource(GetResourceRequest)
            returns (google.api.HttpBody);
          rpc UpdateResource(google.api.HttpBody)
            returns (google.protobuf.Empty);

        }

    Example with streaming methods:

        service CaldavService {
          rpc GetCalendar(stream google.api.HttpBody)
            returns (stream google.api.HttpBody);
          rpc UpdateCalendar(stream google.api.HttpBody)
            returns (stream google.api.HttpBody);

        }

    Use of this type only changes how the request and response bodies are
    handled, all other features will continue to work unchanged.
    """


    content_type: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The HTTP Content-Type header value specifying the content type of the body.
    """

    data: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)
    """
    The HTTP request/response body as raw binary.
    """

    extensions: "list[_protobuf__.Any]" = betterproto2.field(3, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    Application specific response metadata. Must be set in the first response
    for streaming APIs.
    """





default_message_pool.register_message("google.api", "HttpBody", HttpBody)


@dataclass(eq=False, repr=False)
class HttpRule(betterproto2.Message):
    """
    gRPC Transcoding

    gRPC Transcoding is a feature for mapping between a gRPC method and one or
    more HTTP REST endpoints. It allows developers to build a single API service
    that supports both gRPC APIs and REST APIs. Many systems, including [Google
    APIs](https://github.com/googleapis/googleapis),
    [Cloud Endpoints](https://cloud.google.com/endpoints), [gRPC
    Gateway](https://github.com/grpc-ecosystem/grpc-gateway),
    and [Envoy](https://github.com/envoyproxy/envoy) proxy support this feature
    and use it for large scale production services.

    `HttpRule` defines the schema of the gRPC/REST mapping. The mapping specifies
    how different portions of the gRPC request message are mapped to the URL
    path, URL query parameters, and HTTP request body. It also controls how the
    gRPC response message is mapped to the HTTP response body. `HttpRule` is
    typically specified as an `google.api.http` annotation on the gRPC method.

    Each mapping specifies a URL path template and an HTTP method. The path
    template may refer to one or more fields in the gRPC request message, as long
    as each field is a non-repeated field with a primitive (non-message) type.
    The path template controls how fields of the request message are mapped to
    the URL path.

    Example:

        service Messaging {
          rpc GetMessage(GetMessageRequest) returns (Message) {
            option (google.api.http) = {
                get: "/v1/{name=messages/*}"
            };
          }
        }
        message GetMessageRequest {
          string name = 1; // Mapped to URL path.
        }
        message Message {
          string text = 1; // The resource content.
        }

    This enables an HTTP REST to gRPC mapping as below:

    - HTTP: `GET /v1/messages/123456`
    - gRPC: `GetMessage(name: "messages/123456")`

    Any fields in the request message which are not bound by the path template
    automatically become HTTP query parameters if there is no HTTP request body.
    For example:

        service Messaging {
          rpc GetMessage(GetMessageRequest) returns (Message) {
            option (google.api.http) = {
                get:"/v1/messages/{message_id}"
            };
          }
        }
        message GetMessageRequest {
          message SubMessage {
            string subfield = 1;
          }
          string message_id = 1; // Mapped to URL path.
          int64 revision = 2;    // Mapped to URL query parameter `revision`.
          SubMessage sub = 3;    // Mapped to URL query parameter `sub.subfield`.
        }

    This enables a HTTP JSON to RPC mapping as below:

    - HTTP: `GET /v1/messages/123456?revision=2&sub.subfield=foo`
    - gRPC: `GetMessage(message_id: "123456" revision: 2 sub:
    SubMessage(subfield: "foo"))`

    Note that fields which are mapped to URL query parameters must have a
    primitive type or a repeated primitive type or a non-repeated message type.
    In the case of a repeated type, the parameter can be repeated in the URL
    as `...?param=A&param=B`. In the case of a message type, each field of the
    message is mapped to a separate parameter, such as
    `...?foo.a=A&foo.b=B&foo.c=C`.

    For HTTP methods that allow a request body, the `body` field
    specifies the mapping. Consider a REST update method on the
    message resource collection:

        service Messaging {
          rpc UpdateMessage(UpdateMessageRequest) returns (Message) {
            option (google.api.http) = {
              patch: "/v1/messages/{message_id}"
              body: "message"
            };
          }
        }
        message UpdateMessageRequest {
          string message_id = 1; // mapped to the URL
          Message message = 2;   // mapped to the body
        }

    The following HTTP JSON to RPC mapping is enabled, where the
    representation of the JSON in the request body is determined by
    protos JSON encoding:

    - HTTP: `PATCH /v1/messages/123456 { "text": "Hi!" }`
    - gRPC: `UpdateMessage(message_id: "123456" message { text: "Hi!" })`

    The special name `*` can be used in the body mapping to define that
    every field not bound by the path template should be mapped to the
    request body.  This enables the following alternative definition of
    the update method:

        service Messaging {
          rpc UpdateMessage(Message) returns (Message) {
            option (google.api.http) = {
              patch: "/v1/messages/{message_id}"
              body: "*"
            };
          }
        }
        message Message {
          string message_id = 1;
          string text = 2;
        }

    The following HTTP JSON to RPC mapping is enabled:

    - HTTP: `PATCH /v1/messages/123456 { "text": "Hi!" }`
    - gRPC: `UpdateMessage(message_id: "123456" text: "Hi!")`

    Note that when using `*` in the body mapping, it is not possible to
    have HTTP parameters, as all fields not bound by the path end in
    the body. This makes this option more rarely used in practice when
    defining REST APIs. The common usage of `*` is in custom methods
    which don't use the URL at all for transferring data.

    It is possible to define multiple HTTP methods for one RPC by using
    the `additional_bindings` option. Example:

        service Messaging {
          rpc GetMessage(GetMessageRequest) returns (Message) {
            option (google.api.http) = {
              get: "/v1/messages/{message_id}"
              additional_bindings {
                get: "/v1/users/{user_id}/messages/{message_id}"
              }
            };
          }
        }
        message GetMessageRequest {
          string message_id = 1;
          string user_id = 2;
        }

    This enables the following two alternative HTTP JSON to RPC mappings:

    - HTTP: `GET /v1/messages/123456`
    - gRPC: `GetMessage(message_id: "123456")`

    - HTTP: `GET /v1/users/me/messages/123456`
    - gRPC: `GetMessage(user_id: "me" message_id: "123456")`

    Rules for HTTP mapping

    1. Leaf request fields (recursive expansion nested messages in the request
       message) are classified into three categories:
       - Fields referred by the path template. They are passed via the URL path.
       - Fields referred by the [HttpRule.body][google.api.HttpRule.body]. They
       are passed via the HTTP
         request body.
       - All other fields are passed via the URL query parameters, and the
         parameter name is the field path in the request message. A repeated
         field can be represented as multiple query parameters under the same
         name.
     2. If [HttpRule.body][google.api.HttpRule.body] is "*", there is no URL
     query parameter, all fields
        are passed via URL path and HTTP request body.
     3. If [HttpRule.body][google.api.HttpRule.body] is omitted, there is no HTTP
     request body, all
        fields are passed via URL path and URL query parameters.

    Path template syntax

        Template = "/" Segments [ Verb ] ;
        Segments = Segment { "/" Segment } ;
        Segment  = "*" | "**" | LITERAL | Variable ;
        Variable = "{" FieldPath [ "=" Segments ] "}" ;
        FieldPath = IDENT { "." IDENT } ;
        Verb     = ":" LITERAL ;

    The syntax `*` matches a single URL path segment. The syntax `**` matches
    zero or more URL path segments, which must be the last part of the URL path
    except the `Verb`.

    The syntax `Variable` matches part of the URL path as specified by its
    template. A variable template must not contain other variables. If a variable
    matches a single path segment, its template may be omitted, e.g. `{var}`
    is equivalent to `{var=*}`.

    The syntax `LITERAL` matches literal text in the URL path. If the `LITERAL`
    contains any reserved character, such characters should be percent-encoded
    before the matching.

    If a variable contains exactly one path segment, such as `"{var}"` or
    `"{var=*}"`, when such a variable is expanded into a URL path on the client
    side, all characters except `[-_.~0-9a-zA-Z]` are percent-encoded. The
    server side does the reverse decoding. Such variables show up in the
    [Discovery
    Document](https://developers.google.com/discovery/v1/reference/apis) as
    `{var}`.

    If a variable contains multiple path segments, such as `"{var=foo/*}"`
    or `"{var=**}"`, when such a variable is expanded into a URL path on the
    client side, all characters except `[-_.~/0-9a-zA-Z]` are percent-encoded.
    The server side does the reverse decoding, except "%2F" and "%2f" are left
    unchanged. Such variables show up in the
    [Discovery
    Document](https://developers.google.com/discovery/v1/reference/apis) as
    `{+var}`.

    Using gRPC API Service Configuration

    gRPC API Service Configuration (service config) is a configuration language
    for configuring a gRPC service to become a user-facing product. The
    service config is simply the YAML representation of the `google.api.Service`
    proto message.

    As an alternative to annotating your proto file, you can configure gRPC
    transcoding in your service config YAML files. You do this by specifying a
    `HttpRule` that maps the gRPC method to a REST endpoint, achieving the same
    effect as the proto annotation. This can be particularly useful if you
    have a proto that is reused in multiple services. Note that any transcoding
    specified in the service config will override any matching transcoding
    configuration in the proto.

    The following example selects a gRPC method and applies an `HttpRule` to it:

        http:
          rules:
            - selector: example.v1.Messaging.GetMessage
              get: /v1/messages/{message_id}/{sub.subfield}

    Special notes

    When gRPC Transcoding is used to map a gRPC to JSON REST endpoints, the
    proto to JSON conversion must follow the [proto3
    specification](https://developers.google.com/protocol-buffers/docs/proto3#json).

    While the single segment variable follows the semantics of
    [RFC 6570](https://tools.ietf.org/html/rfc6570) Section 3.2.2 Simple String
    Expansion, the multi segment variable **does not** follow RFC 6570 Section
    3.2.3 Reserved Expansion. The reason is that the Reserved Expansion
    does not expand special characters like `?` and `#`, which would lead
    to invalid URLs. As the result, gRPC Transcoding uses a custom encoding
    for multi segment variables.

    The path variables **must not** refer to any repeated or mapped field,
    because client libraries are not capable of handling such variable expansion.

    The path variables **must not** capture the leading "/" character. The reason
    is that the most common use case "{var}" does not capture the leading "/"
    character. For consistency, all path variables must share the same behavior.

    Repeated message fields must not be mapped to URL query parameters, because
    no client library can support such complicated mapping.

    If an API needs to use a JSON array for request or response body, it can map
    the request or response body to a repeated field. However, some gRPC
    Transcoding implementations may not support this feature.

    Oneofs:
        - pattern: Determines the URL pattern is matched by this rules. This pattern can be
            used with any of the {get|put|post|delete|patch} methods. A custom method
            can be defined using the 'custom' field.
    """


    selector: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Selects a method to which this rule applies.

    Refer to [selector][google.api.DocumentationRule.selector] for syntax
    details.
    """

    get: "str | None" = betterproto2.field(2, betterproto2.TYPE_STRING, optional=True, group="pattern")
    """
    Maps to HTTP GET. Used for listing and getting information about
    resources.
    """

    put: "str | None" = betterproto2.field(3, betterproto2.TYPE_STRING, optional=True, group="pattern")
    """
    Maps to HTTP PUT. Used for replacing a resource.
    """

    post: "str | None" = betterproto2.field(4, betterproto2.TYPE_STRING, optional=True, group="pattern")
    """
    Maps to HTTP POST. Used for creating a resource or performing an action.
    """

    delete: "str | None" = betterproto2.field(5, betterproto2.TYPE_STRING, optional=True, group="pattern")
    """
    Maps to HTTP DELETE. Used for deleting a resource.
    """

    patch: "str | None" = betterproto2.field(6, betterproto2.TYPE_STRING, optional=True, group="pattern")
    """
    Maps to HTTP PATCH. Used for updating a resource.
    """

    custom: "CustomHttpPattern | None" = betterproto2.field(8, betterproto2.TYPE_MESSAGE, optional=True, group="pattern")
    """
    The custom pattern is used for specifying an HTTP method that is not
    included in the `pattern` field, such as HEAD, or "*" to leave the
    HTTP method unspecified for this rule. The wild-card rule is useful
    for services that provide content to Web (HTML) clients.
    """

    body: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)
    """
    The name of the request field whose value is mapped to the HTTP request
    body, or `*` for mapping all request fields not captured by the path
    pattern to the HTTP body, or omitted for not having any HTTP request body.

    NOTE: the referred field must be present at the top-level of the request
    message type.
    """

    response_body: "str" = betterproto2.field(12, betterproto2.TYPE_STRING)
    """
    Optional. The name of the response field whose value is mapped to the HTTP
    response body. When omitted, the entire response message will be used
    as the HTTP response body.

    NOTE: The referred field must be present at the top-level of the response
    message type.
    """

    additional_bindings: "list[HttpRule]" = betterproto2.field(11, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    Additional HTTP bindings for the selector. Nested bindings must
    not contain an `additional_bindings` field themselves (that is,
    the nesting may only be one level deep).
    """





default_message_pool.register_message("google.api", "HttpRule", HttpRule)


@dataclass(eq=False, repr=False)
class JavaSettings(betterproto2.Message):
    """
    Settings for Java client libraries.
    """


    library_package: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The package name to use in Java. Clobbers the java_package option
    set in the protobuf. This should be used **only** by APIs
    who have already set the language_settings.java.package_name" field
    in gapic.yaml. API teams should use the protobuf java_package option
    where possible.

    Example of a YAML configuration::

     publishing:
       java_settings:
         library_package: com.google.cloud.pubsub.v1
    """

    service_class_names: "dict[str, str]" = betterproto2.field(2, betterproto2.TYPE_MAP, map_meta=betterproto2.map_meta(betterproto2.TYPE_STRING, betterproto2.TYPE_STRING))
    """
    Configure the Java class name to use instead of the service's for its
    corresponding generated GAPIC client. Keys are fully-qualified
    service names as they appear in the protobuf (including the full
    the language_settings.java.interface_names" field in gapic.yaml. API
    teams should otherwise use the service name as it appears in the
    protobuf.

    Example of a YAML configuration::

     publishing:
       java_settings:
         service_class_names:
           - google.pubsub.v1.Publisher: TopicAdmin
           - google.pubsub.v1.Subscriber: SubscriptionAdmin
    """

    common: "CommonLanguageSettings | None" = betterproto2.field(3, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Some settings.
    """





default_message_pool.register_message("google.api", "JavaSettings", JavaSettings)


@dataclass(eq=False, repr=False)
class MethodSettings(betterproto2.Message):
    """
    Describes the generator configuration for a method.
    """


    selector: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The fully qualified name of the method, for which the options below apply.
    This is used to find the method to apply the options.

    Example:

       publishing:
         method_settings:
         - selector: google.storage.control.v2.StorageControl.CreateFolder
           # method settings for CreateFolder...
    """

    long_running: "MethodSettingsLongRunning | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Describes settings to use for long-running operations when generating
    API methods for RPCs. Complements RPCs that use the annotations in
    google/longrunning/operations.proto.

    Example of a YAML configuration::

       publishing:
         method_settings:
         - selector: google.cloud.speech.v2.Speech.BatchRecognize
           long_running:
             initial_poll_delay: 60s # 1 minute
             poll_delay_multiplier: 1.5
             max_poll_delay: 360s # 6 minutes
             total_poll_timeout: 54000s # 90 minutes
    """

    auto_populated_fields: "list[str]" = betterproto2.field(3, betterproto2.TYPE_STRING, repeated=True)
    """
    List of top-level fields of the request message, that should be
    automatically populated by the client libraries based on their
    (google.api.field_info).format. Currently supported format: UUID4.

    Example of a YAML configuration:

       publishing:
         method_settings:
         - selector: google.example.v1.ExampleService.CreateExample
           auto_populated_fields:
           - request_id
    """





default_message_pool.register_message("google.api", "MethodSettings", MethodSettings)


@dataclass(eq=False, repr=False)
class MethodSettingsLongRunning(betterproto2.Message):
    """
    Describes settings to use when generating API methods that use the
    long-running operation pattern.
    All default values below are from those used in the client library
    generators (e.g.
    [Java](https://github.com/googleapis/gapic-generator-java/blob/04c2faa191a9b5a10b92392fe8482279c4404803/src/main/java/com/google/api/generator/gapic/composer/common/RetrySettingsComposer.java)).
    """


    initial_poll_delay: "datetime.timedelta | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, unwrap=lambda: _protobuf__.Duration, optional=True)
    """
    Initial delay after which the first poll request will be made.
    Default value: 5 seconds.
    """

    poll_delay_multiplier: "float" = betterproto2.field(2, betterproto2.TYPE_FLOAT)
    """
    Multiplier to gradually increase delay between subsequent polls until it
    reaches max_poll_delay.
    Default value: 1.5.
    """

    max_poll_delay: "datetime.timedelta | None" = betterproto2.field(3, betterproto2.TYPE_MESSAGE, unwrap=lambda: _protobuf__.Duration, optional=True)
    """
    Maximum time between two subsequent poll requests.
    Default value: 45 seconds.
    """

    total_poll_timeout: "datetime.timedelta | None" = betterproto2.field(4, betterproto2.TYPE_MESSAGE, unwrap=lambda: _protobuf__.Duration, optional=True)
    """
    Total polling timeout.
    Default value: 5 minutes.
    """





default_message_pool.register_message("google.api", "MethodSettings.LongRunning", MethodSettingsLongRunning)


@dataclass(eq=False, repr=False)
class NodeSettings(betterproto2.Message):
    """
    Settings for Node client libraries.
    """


    common: "CommonLanguageSettings | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Some settings.
    """





default_message_pool.register_message("google.api", "NodeSettings", NodeSettings)


@dataclass(eq=False, repr=False)
class PhpSettings(betterproto2.Message):
    """
    Settings for Php client libraries.
    """


    common: "CommonLanguageSettings | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Some settings.
    """





default_message_pool.register_message("google.api", "PhpSettings", PhpSettings)


@dataclass(eq=False, repr=False)
class Publishing(betterproto2.Message):
    """
    This message configures the settings for publishing [Google Cloud Client
    libraries](https://cloud.google.com/apis/docs/cloud-client-libraries)
    generated from the service config.
    """


    method_settings: "list[MethodSettings]" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    A list of API method settings, e.g. the behavior for methods that use the
    long-running operation pattern.
    """

    new_issue_uri: "str" = betterproto2.field(101, betterproto2.TYPE_STRING)
    """
    Link to a *public* URI where users can report issues.  Example:
    https://issuetracker.google.com/issues/new?component=190865&template=1161103
    """

    documentation_uri: "str" = betterproto2.field(102, betterproto2.TYPE_STRING)
    """
    Link to product home page.  Example:
    https://cloud.google.com/asset-inventory/docs/overview
    """

    api_short_name: "str" = betterproto2.field(103, betterproto2.TYPE_STRING)
    """
    Used as a tracking tag when collecting data about the APIs developer
    relations artifacts like docs, packages delivered to package managers,
    etc.  Example: "speech".
    """

    github_label: "str" = betterproto2.field(104, betterproto2.TYPE_STRING)
    """
    GitHub label to apply to issues and pull requests opened for this API.
    """

    codeowner_github_teams: "list[str]" = betterproto2.field(105, betterproto2.TYPE_STRING, repeated=True)
    """
    GitHub teams to be added to CODEOWNERS in the directory in GitHub
    containing source code for the client libraries for this API.
    """

    doc_tag_prefix: "str" = betterproto2.field(106, betterproto2.TYPE_STRING)
    """
    A prefix used in sample code when demarking regions to be included in
    documentation.
    """

    organization: "ClientLibraryOrganization" = betterproto2.field(107, betterproto2.TYPE_ENUM, default_factory=lambda: ClientLibraryOrganization(0))
    """
    For whom the client library is being published.
    """

    library_settings: "list[ClientLibrarySettings]" = betterproto2.field(109, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    Client library settings.  If the same version string appears multiple
    times in this list, then the last one wins.  Settings from earlier
    settings with the same version string are discarded.
    """

    proto_reference_documentation_uri: "str" = betterproto2.field(110, betterproto2.TYPE_STRING)
    """
    Optional link to proto reference documentation.  Example:
    https://cloud.google.com/pubsub/lite/docs/reference/rpc
    """

    rest_reference_documentation_uri: "str" = betterproto2.field(111, betterproto2.TYPE_STRING)
    """
    Optional link to REST reference documentation.  Example:
    https://cloud.google.com/pubsub/lite/docs/reference/rest
    """





default_message_pool.register_message("google.api", "Publishing", Publishing)


@dataclass(eq=False, repr=False)
class PythonSettings(betterproto2.Message):
    """
    Settings for Python client libraries.
    """


    common: "CommonLanguageSettings | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Some settings.
    """

    experimental_features: "PythonSettingsExperimentalFeatures | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Experimental features to be included during client library generation.
    """





default_message_pool.register_message("google.api", "PythonSettings", PythonSettings)


@dataclass(eq=False, repr=False)
class PythonSettingsExperimentalFeatures(betterproto2.Message):
    """
    Experimental features to be included during client library generation.
    These fields will be deprecated once the feature graduates and is enabled
    by default.
    """


    rest_async_io_enabled: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)
    """
    Enables generation of asynchronous REST clients if `rest` transport is
    enabled. By default, asynchronous REST clients will not be generated.
    This feature will be enabled by default 1 month after launching the
    feature in preview packages.
    """

    protobuf_pythonic_types_enabled: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    Enables generation of protobuf code using new types that are more
    Pythonic which are included in `protobuf>=5.29.x`. This feature will be
    enabled by default 1 month after launching the feature in preview
    packages.
    """

    unversioned_package_disabled: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    Disables generation of an unversioned Python package for this client
    library. This means that the module names will need to be versioned in
    import statements. For example `import google.cloud.library_v2` instead
    of `import google.cloud.library`.
    """





default_message_pool.register_message("google.api", "PythonSettings.ExperimentalFeatures", PythonSettingsExperimentalFeatures)


@dataclass(eq=False, repr=False)
class ResourceDescriptor(betterproto2.Message):
    """
    A simple descriptor of a resource type.

    ResourceDescriptor annotates a resource message (either by means of a
    protobuf annotation or use in the service config), and associates the
    resource's schema, the resource type, and the pattern of the resource name.

    Example:

        message Topic {
          // Indicates this message defines a resource schema.
          // Declares the resource type in the format of {service}/{kind}.
          // For Kubernetes resources, the format is {api group}/{kind}.
          option (google.api.resource) = {
            type: "pubsub.googleapis.com/Topic"
            pattern: "projects/{project}/topics/{topic}"
          };
        }

    The ResourceDescriptor Yaml config will look like:

        resources:
        - type: "pubsub.googleapis.com/Topic"
          pattern: "projects/{project}/topics/{topic}"

    Sometimes, resources have multiple patterns, typically because they can
    live under multiple parents.

    Example:

        message LogEntry {
          option (google.api.resource) = {
            type: "logging.googleapis.com/LogEntry"
            pattern: "projects/{project}/logs/{log}"
            pattern: "folders/{folder}/logs/{log}"
            pattern: "organizations/{organization}/logs/{log}"
            pattern: "billingAccounts/{billing_account}/logs/{log}"
          };
        }

    The ResourceDescriptor Yaml config will look like:

        resources:
        - type: 'logging.googleapis.com/LogEntry'
          pattern: "projects/{project}/logs/{log}"
          pattern: "folders/{folder}/logs/{log}"
          pattern: "organizations/{organization}/logs/{log}"
          pattern: "billingAccounts/{billing_account}/logs/{log}"
    """


    type: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The resource type. It must be in the format of
    {service_name}/{resource_type_kind}. The `resource_type_kind` must be
    singular and must not include version numbers.

    Example: `storage.googleapis.com/Bucket`

    The value of the resource_type_kind must follow the regular expression
    /[A-Za-z][a-zA-Z0-9]+/. It should start with an upper case character and
    should use PascalCase (UpperCamelCase). The maximum number of
    characters allowed for the `resource_type_kind` is 100.
    """

    pattern: "list[str]" = betterproto2.field(2, betterproto2.TYPE_STRING, repeated=True)
    """
    Optional. The relative resource name pattern associated with this resource
    type. The DNS prefix of the full resource name shouldn't be specified here.

    The path pattern must follow the syntax, which aligns with HTTP binding
    syntax:

        Template = Segment { "/" Segment } ;
        Segment = LITERAL | Variable ;
        Variable = "{" LITERAL "}" ;

    Examples:

        - "projects/{project}/topics/{topic}"
        - "projects/{project}/knowledgeBases/{knowledge_base}"

    The components in braces correspond to the IDs for each resource in the
    hierarchy. It is expected that, if multiple patterns are provided,
    the same component name (e.g. "project") refers to IDs of the same
    type of resource.
    """

    name_field: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Optional. The field on the resource that designates the resource name
    field. If omitted, this is assumed to be "name".
    """

    history: "ResourceDescriptorHistory" = betterproto2.field(4, betterproto2.TYPE_ENUM, default_factory=lambda: ResourceDescriptorHistory(0))
    """
    Optional. The historical or future-looking state of the resource pattern.

    Example:

        // The InspectTemplate message originally only supported resource
        // names with organization, and project was added later.
        message InspectTemplate {
          option (google.api.resource) = {
            type: "dlp.googleapis.com/InspectTemplate"
            pattern:
            "organizations/{organization}/inspectTemplates/{inspect_template}"
            pattern: "projects/{project}/inspectTemplates/{inspect_template}"
            history: ORIGINALLY_SINGLE_PATTERN
          };
        }
    """

    plural: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    The plural name used in the resource name and permission names, such as
    'projects' for the resource name of 'projects/{project}' and the permission
    name of 'cloudresourcemanager.googleapis.com/projects.get'. One exception
    to this is for Nested Collections that have stuttering names, as defined
    in [AIP-122](https://google.aip.dev/122#nested-collections), where the
    collection ID in the resource name pattern does not necessarily directly
    match the `plural` value.

    It is the same concept of the `plural` field in k8s CRD spec
    https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/

    Note: The plural form is required even for singleton resources. See
    https://aip.dev/156
    """

    singular: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    The same concept of the `singular` field in k8s CRD spec
    https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/
    Such as "project" for the `resourcemanager.googleapis.com/Project` type.
    """

    style: "list[ResourceDescriptorStyle]" = betterproto2.field(10, betterproto2.TYPE_ENUM, repeated=True)
    """
    Style flag(s) for this resource.
    These indicate that a resource is expected to conform to a given
    style. See the specific style flags for additional information.
    """





default_message_pool.register_message("google.api", "ResourceDescriptor", ResourceDescriptor)


@dataclass(eq=False, repr=False)
class ResourceReference(betterproto2.Message):
    """
    Defines a proto annotation that describes a string field that refers to
    an API resource.
    """


    type: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The resource type that the annotated field references.

    Example:

        message Subscription {
          string topic = 2 [(google.api.resource_reference) = {
            type: "pubsub.googleapis.com/Topic"
          }];
        }

    Occasionally, a field may reference an arbitrary resource. In this case,
    APIs use the special value * in their resource reference.

    Example:

        message GetIamPolicyRequest {
          string resource = 2 [(google.api.resource_reference) = {
            type: "*"
          }];
        }
    """

    child_type: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The resource type of a child collection that the annotated field
    references. This is useful for annotating the `parent` field that
    doesn't have a fixed resource type.

    Example:

        message ListLogEntriesRequest {
          string parent = 1 [(google.api.resource_reference) = {
            child_type: "logging.googleapis.com/LogEntry"
          };
        }
    """





default_message_pool.register_message("google.api", "ResourceReference", ResourceReference)


@dataclass(eq=False, repr=False)
class RubySettings(betterproto2.Message):
    """
    Settings for Ruby client libraries.
    """


    common: "CommonLanguageSettings | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Some settings.
    """





default_message_pool.register_message("google.api", "RubySettings", RubySettings)


@dataclass(eq=False, repr=False)
class SelectiveGapicGeneration(betterproto2.Message):
    """
    This message is used to configure the generation of a subset of the RPCs in
    a service for client libraries.
    """


    methods: "list[str]" = betterproto2.field(1, betterproto2.TYPE_STRING, repeated=True)
    """
    An allowlist of the fully qualified names of RPCs that should be included
    on public client surfaces.
    """

    generate_omitted_as_internal: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    Setting this to true indicates to the client generators that methods
    that would be excluded from the generation should instead be generated
    in a way that indicates these methods should not be consumed by
    end users. How this is expressed is up to individual language
    implementations to decide. Some examples may be: added annotations,
    obfuscated identifiers, or other language idiomatic patterns.
    """





default_message_pool.register_message("google.api", "SelectiveGapicGeneration", SelectiveGapicGeneration)




from .. import protobuf as _protobuf__


