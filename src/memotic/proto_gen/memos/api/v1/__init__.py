
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: api/v1/activity_service.proto, api/v1/attachment_service.proto, api/v1/auth_service.proto, api/v1/common.proto, api/v1/idp_service.proto, api/v1/inbox_service.proto, api/v1/markdown_service.proto, api/v1/memo_service.proto, api/v1/shortcut_service.proto, api/v1/user_service.proto, api/v1/workspace_service.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("ActivityLevel","ActivityType","Direction","IdentityProviderType","InboxStatus","InboxType","ListNodeKind","MemoRelationType","NodeType","State","UserRole","UserSettingKey","Visibility","WorkspaceSettingKey","WorkspaceSettingStorageSettingStorageType","Activity","ActivityMemoCommentPayload","ActivityPayload","Attachment","AutoLinkNode","BlockquoteNode","BoldItalicNode","BoldNode","CodeBlockNode","CodeNode","CreateAttachmentRequest","CreateIdentityProviderRequest","CreateMemoCommentRequest","CreateMemoRequest","CreateSessionRequest","CreateSessionRequestPasswordCredentials","CreateSessionRequestSsoCredentials","CreateSessionResponse","CreateShortcutRequest","CreateUserAccessTokenRequest","CreateUserRequest","CreateUserWebhookRequest","DeleteAttachmentRequest","DeleteIdentityProviderRequest","DeleteInboxRequest","DeleteMemoReactionRequest","DeleteMemoRequest","DeleteMemoTagRequest","DeleteSessionRequest","DeleteShortcutRequest","DeleteUserAccessTokenRequest","DeleteUserRequest","DeleteUserWebhookRequest","EmbeddedContentNode","EscapingCharacterNode","FieldMapping","GetActivityRequest","GetAttachmentBinaryRequest","GetAttachmentRequest","GetCurrentSessionRequest","GetCurrentSessionResponse","GetIdentityProviderRequest","GetLinkMetadataRequest","GetMemoRequest","GetShortcutRequest","GetUserAvatarRequest","GetUserRequest","GetUserSettingRequest","GetUserStatsRequest","GetWorkspaceProfileRequest","GetWorkspaceSettingRequest","HeadingNode","HighlightNode","HorizontalRuleNode","HtmlElementNode","IdentityProvider","IdentityProviderConfig","ImageNode","Inbox","ItalicNode","LineBreakNode","LinkMetadata","LinkNode","ListActivitiesRequest","ListActivitiesResponse","ListAllUserStatsRequest","ListAllUserStatsResponse","ListAttachmentsRequest","ListAttachmentsResponse","ListIdentityProvidersRequest","ListIdentityProvidersResponse","ListInboxesRequest","ListInboxesResponse","ListMemoAttachmentsRequest","ListMemoAttachmentsResponse","ListMemoCommentsRequest","ListMemoCommentsResponse","ListMemoReactionsRequest","ListMemoReactionsResponse","ListMemoRelationsRequest","ListMemoRelationsResponse","ListMemosRequest","ListMemosResponse","ListNode","ListShortcutsRequest","ListShortcutsResponse","ListUserAccessTokensRequest","ListUserAccessTokensResponse","ListUserSessionsRequest","ListUserSessionsResponse","ListUserSettingsRequest","ListUserSettingsResponse","ListUsersRequest","ListUsersResponse","ListUserWebhooksRequest","ListUserWebhooksResponse","Location","MathBlockNode","MathNode","Memo","MemoProperty","MemoRelation","MemoRelationMemo","Node","OAuth2Config","OrderedListItemNode","PageToken","ParagraphNode","ParseMarkdownRequest","ParseMarkdownResponse","Reaction","ReferencedContentNode","RenameMemoTagRequest","RestoreMarkdownNodesRequest","RestoreMarkdownNodesResponse","RevokeUserSessionRequest","SetMemoAttachmentsRequest","SetMemoRelationsRequest","Shortcut","SpoilerNode","StrikethroughNode","StringifyMarkdownNodesRequest","StringifyMarkdownNodesResponse","SubscriptNode","SuperscriptNode","TableNode","TableNodeRow","TagNode","TaskListItemNode","TextNode","UnorderedListItemNode","UpdateAttachmentRequest","UpdateIdentityProviderRequest","UpdateInboxRequest","UpdateMemoRequest","UpdateShortcutRequest","UpdateUserRequest","UpdateUserSettingRequest","UpdateUserWebhookRequest","UpdateWorkspaceSettingRequest","UpsertMemoReactionRequest","User","UserAccessToken","UserSession","UserSessionClientInfo","UserSetting","UserSettingAccessTokensSetting","UserSettingGeneralSetting","UserSettingSessionsSetting","UserSettingWebhooksSetting","UserStats","UserStatsMemoTypeStats","UserWebhook","WorkspaceProfile","WorkspaceSetting","WorkspaceSettingGeneralSetting","WorkspaceSettingGeneralSettingCustomProfile","WorkspaceSettingMemoRelatedSetting","WorkspaceSettingStorageSetting","WorkspaceSettingStorageSettingS3Config","ActivityServiceStub","AttachmentServiceStub","AuthServiceStub","IdentityProviderServiceStub","InboxServiceStub","MarkdownServiceStub","MemoServiceStub","ShortcutServiceStub","UserServiceStub","WorkspaceServiceStub","ActivityServiceBase","AttachmentServiceBase","AuthServiceBase","IdentityProviderServiceBase","InboxServiceBase","MarkdownServiceBase","MemoServiceBase","ShortcutServiceBase","UserServiceBase","WorkspaceServiceBase",)

import re
import builtins
import datetime
import dateutil.parser
import warnings
from collections.abc import AsyncIterable, AsyncIterator, Iterable, Iterator
import typing
from typing import TYPE_CHECKING

from dataclasses import dataclass

import betterproto2
from betterproto2.grpc.grpclib_server import ServiceBase
import grpc
import grpclib
from google.protobuf.descriptor import Descriptor, EnumDescriptor

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION="0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)
class ActivityLevel(betterproto2.Enum):
    """
    Activity levels.
    """


    LEVEL_UNSPECIFIED = 0
    """
    Unspecified level.
    """

    INFO = 1
    """
    Info level.
    """

    WARN = 2
    """
    Warn level.
    """

    ERROR = 3
    """
    Error level.
    """




class ActivityType(betterproto2.Enum):
    """
    Activity types.
    """


    TYPE_UNSPECIFIED = 0
    """
    Unspecified type.
    """

    MEMO_COMMENT = 1
    """
    Memo comment activity.
    """

    VERSION_UPDATE = 2
    """
    Version update activity.
    """




class Direction(betterproto2.Enum):


    DIRECTION_UNSPECIFIED = 0

    ASC = 1

    DESC = 2




class IdentityProviderType(betterproto2.Enum):


    TYPE_UNSPECIFIED = 0

    OAUTH2 = 1
    """
    OAuth2 identity provider.
    """




class InboxStatus(betterproto2.Enum):
    """
    Status enumeration for inbox notifications.
    """


    STATUS_UNSPECIFIED = 0
    """
    Unspecified status.
    """

    UNREAD = 1
    """
    The notification is unread.
    """

    ARCHIVED = 2
    """
    The notification is archived.
    """




class InboxType(betterproto2.Enum):
    """
    Type enumeration for inbox notifications.
    """


    TYPE_UNSPECIFIED = 0
    """
    Unspecified type.
    """

    MEMO_COMMENT = 1
    """
    Memo comment notification.
    """

    VERSION_UPDATE = 2
    """
    Version update notification.
    """




class ListNodeKind(betterproto2.Enum):


    KIND_UNSPECIFIED = 0

    ORDERED = 1

    UNORDERED = 2

    DESCRIPTION = 3




class MemoRelationType(betterproto2.Enum):
    """
    The type of the relation.
    """


    TYPE_UNSPECIFIED = 0

    REFERENCE = 1

    COMMENT = 2




class NodeType(betterproto2.Enum):


    NODE_UNSPECIFIED = 0

    LINE_BREAK = 1
    """
    Block nodes.
    """

    PARAGRAPH = 2

    CODE_BLOCK = 3

    HEADING = 4

    HORIZONTAL_RULE = 5

    BLOCKQUOTE = 6

    LIST = 7

    ORDERED_LIST_ITEM = 8

    UNORDERED_LIST_ITEM = 9

    TASK_LIST_ITEM = 10

    MATH_BLOCK = 11

    TABLE = 12

    EMBEDDED_CONTENT = 13

    TEXT = 51
    """
    Inline nodes.
    """

    BOLD = 52

    ITALIC = 53

    BOLD_ITALIC = 54

    CODE = 55

    IMAGE = 56

    LINK = 57

    AUTO_LINK = 58

    TAG = 59

    STRIKETHROUGH = 60

    ESCAPING_CHARACTER = 61

    MATH = 62

    HIGHLIGHT = 63

    SUBSCRIPT = 64

    SUPERSCRIPT = 65

    REFERENCED_CONTENT = 66

    SPOILER = 67

    HTML_ELEMENT = 68




class State(betterproto2.Enum):


    STATE_UNSPECIFIED = 0

    NORMAL = 1

    ARCHIVED = 2




class UserRole(betterproto2.Enum):
    """
    User role enumeration.
    """


    ROLE_UNSPECIFIED = 0
    """
    Unspecified role.
    """

    HOST = 1
    """
    Host role with full system access.
    """

    ADMIN = 2
    """
    Admin role with administrative privileges.
    """

    USER = 3
    """
    Regular user role.
    """




class UserSettingKey(betterproto2.Enum):
    """
    Enumeration of user setting keys.
    """


    KEY_UNSPECIFIED = 0

    GENERAL = 1
    """
    GENERAL is the key for general user settings.
    """

    SESSIONS = 2
    """
    SESSIONS is the key for user authentication sessions.
    """

    ACCESS_TOKENS = 3
    """
    ACCESS_TOKENS is the key for access tokens.
    """

    WEBHOOKS = 4
    """
    WEBHOOKS is the key for user webhooks.
    """




class Visibility(betterproto2.Enum):


    VISIBILITY_UNSPECIFIED = 0

    PRIVATE = 1

    PROTECTED = 2

    PUBLIC = 3




class WorkspaceSettingKey(betterproto2.Enum):
    """
    Enumeration of workspace setting keys.
    """


    KEY_UNSPECIFIED = 0

    GENERAL = 1
    """
    GENERAL is the key for general settings.
    """

    STORAGE = 2
    """
    STORAGE is the key for storage settings.
    """

    MEMO_RELATED = 3
    """
    MEMO_RELATED is the key for memo related settings.
    """




class WorkspaceSettingStorageSettingStorageType(betterproto2.Enum):
    """
    Storage type enumeration for different storage backends.
    """


    STORAGE_TYPE_UNSPECIFIED = 0

    DATABASE = 1
    """
    DATABASE is the database storage type.
    """

    LOCAL = 2
    """
    LOCAL is the local storage type.
    """

    S3 = 3
    """
    S3 is the S3 storage type.
    """




@dataclass(eq=False, repr=False)
class Activity(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the activity.
    Format: activities/{id}
    """

    creator: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The name of the creator.
    Format: users/{user}
    """

    type: "ActivityType" = betterproto2.field(3, betterproto2.TYPE_ENUM, default_factory=lambda: ActivityType(0))
    """
    The type of the activity.
    """

    level: "ActivityLevel" = betterproto2.field(4, betterproto2.TYPE_ENUM, default_factory=lambda: ActivityLevel(0))
    """
    The level of the activity.
    """

    create_time: "datetime.datetime | None" = betterproto2.field(5, betterproto2.TYPE_MESSAGE, unwrap=lambda: ___google__protobuf__.Timestamp, optional=True)
    """
    The create time of the activity.
    """

    payload: "ActivityPayload | None" = betterproto2.field(6, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The payload of the activity.
    """





default_message_pool.register_message("memos.api.v1", "Activity", Activity)


@dataclass(eq=False, repr=False)
class ActivityMemoCommentPayload(betterproto2.Message):
    """
    ActivityMemoCommentPayload represents the payload of a memo comment activity.
    """


    memo: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The memo name of comment.
    Format: memos/{memo}
    """

    related_memo: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The name of related memo.
    Format: memos/{memo}
    """





default_message_pool.register_message("memos.api.v1", "ActivityMemoCommentPayload", ActivityMemoCommentPayload)


@dataclass(eq=False, repr=False)
class ActivityPayload(betterproto2.Message):
    """
    

    Oneofs:
        - payload: 
    """


    memo_comment: "ActivityMemoCommentPayload | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True, group="payload")
    """
    Memo comment activity payload.
    """





default_message_pool.register_message("memos.api.v1", "ActivityPayload", ActivityPayload)


@dataclass(eq=False, repr=False)
class Attachment(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the attachment.
    Format: attachments/{attachment}
    """

    create_time: "datetime.datetime | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, unwrap=lambda: ___google__protobuf__.Timestamp, optional=True)
    """
    Output only. The creation timestamp.
    """

    filename: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    The filename of the attachment.
    """

    content: "bytes" = betterproto2.field(4, betterproto2.TYPE_BYTES)
    """
    Input only. The content of the attachment.
    """

    external_link: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    Optional. The external link of the attachment.
    """

    type: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    The MIME type of the attachment.
    """

    size: "int" = betterproto2.field(7, betterproto2.TYPE_INT64)
    """
    Output only. The size of the attachment in bytes.
    """

    memo: "str | None" = betterproto2.field(8, betterproto2.TYPE_STRING, optional=True)
    """
    Optional. The related memo. Refer to `Memo.name`.
    Format: memos/{memo}
    """





default_message_pool.register_message("memos.api.v1", "Attachment", Attachment)


@dataclass(eq=False, repr=False)
class AutoLinkNode(betterproto2.Message):


    url: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    is_raw_text: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)





default_message_pool.register_message("memos.api.v1", "AutoLinkNode", AutoLinkNode)


@dataclass(eq=False, repr=False)
class BlockquoteNode(betterproto2.Message):


    children: "list[Node]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)





default_message_pool.register_message("memos.api.v1", "BlockquoteNode", BlockquoteNode)


@dataclass(eq=False, repr=False)
class BoldItalicNode(betterproto2.Message):


    symbol: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    content: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)





default_message_pool.register_message("memos.api.v1", "BoldItalicNode", BoldItalicNode)


@dataclass(eq=False, repr=False)
class BoldNode(betterproto2.Message):


    symbol: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    children: "list[Node]" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, repeated=True)





default_message_pool.register_message("memos.api.v1", "BoldNode", BoldNode)


@dataclass(eq=False, repr=False)
class CodeBlockNode(betterproto2.Message):


    language: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    content: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)





default_message_pool.register_message("memos.api.v1", "CodeBlockNode", CodeBlockNode)


@dataclass(eq=False, repr=False)
class CodeNode(betterproto2.Message):


    content: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)





default_message_pool.register_message("memos.api.v1", "CodeNode", CodeNode)


@dataclass(eq=False, repr=False)
class CreateAttachmentRequest(betterproto2.Message):


    attachment: "Attachment | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Required. The attachment to create.
    """

    attachment_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Optional. The attachment ID to use for this attachment.
    If empty, a unique ID will be generated.
    """





default_message_pool.register_message("memos.api.v1", "CreateAttachmentRequest", CreateAttachmentRequest)


@dataclass(eq=False, repr=False)
class CreateIdentityProviderRequest(betterproto2.Message):


    identity_provider: "IdentityProvider | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Required. The identity provider to create.
    """

    identity_provider_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Optional. The ID to use for the identity provider, which will become the final component of the resource name.
    If not provided, the system will generate one.
    """





default_message_pool.register_message("memos.api.v1", "CreateIdentityProviderRequest", CreateIdentityProviderRequest)


@dataclass(eq=False, repr=False)
class CreateMemoCommentRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The resource name of the memo.
    Format: memos/{memo}
    """

    comment: "Memo | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Required. The comment to create.
    """

    comment_id: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Optional. The comment ID to use.
    """





default_message_pool.register_message("memos.api.v1", "CreateMemoCommentRequest", CreateMemoCommentRequest)


@dataclass(eq=False, repr=False)
class CreateMemoRequest(betterproto2.Message):


    memo: "Memo | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Required. The memo to create.
    """

    memo_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Optional. The memo ID to use for this memo.
    If empty, a unique ID will be generated.
    """

    validate_only: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    Optional. If set, validate the request but don't actually create the memo.
    """

    request_id: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    Optional. An idempotency token.
    """





default_message_pool.register_message("memos.api.v1", "CreateMemoRequest", CreateMemoRequest)


@dataclass(eq=False, repr=False)
class CreateSessionRequest(betterproto2.Message):
    """
    

    Oneofs:
        - credentials: Provide one authentication method (username/password or SSO).
            Required field to specify the authentication method.
    """


    password_credentials: "CreateSessionRequestPasswordCredentials | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True, group="credentials")
    """
    Username and password authentication method.
    """

    sso_credentials: "CreateSessionRequestSsoCredentials | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True, group="credentials")
    """
    SSO provider authentication method.
    """





default_message_pool.register_message("memos.api.v1", "CreateSessionRequest", CreateSessionRequest)


@dataclass(eq=False, repr=False)
class CreateSessionRequestPasswordCredentials(betterproto2.Message):
    """
    Nested message for password-based authentication credentials.
    """


    username: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The username to sign in with.
    Required field for password-based authentication.
    """

    password: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The password to sign in with.
    Required field for password-based authentication.
    """





default_message_pool.register_message("memos.api.v1", "CreateSessionRequest.PasswordCredentials", CreateSessionRequestPasswordCredentials)


@dataclass(eq=False, repr=False)
class CreateSessionRequestSsoCredentials(betterproto2.Message):
    """
    Nested message for SSO authentication credentials.
    """


    idp_id: "int" = betterproto2.field(1, betterproto2.TYPE_INT32)
    """
    The ID of the SSO provider.
    Required field to identify the SSO provider.
    """

    code: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The authorization code from the SSO provider.
    Required field for completing the SSO flow.
    """

    redirect_uri: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    The redirect URI used in the SSO flow.
    Required field for security validation.
    """





default_message_pool.register_message("memos.api.v1", "CreateSessionRequest.SSOCredentials", CreateSessionRequestSsoCredentials)


@dataclass(eq=False, repr=False)
class CreateSessionResponse(betterproto2.Message):


    user: "User | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The authenticated user information.
    """

    last_accessed_at: "datetime.datetime | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, unwrap=lambda: ___google__protobuf__.Timestamp, optional=True)
    """
    Last time the session was accessed.
    Used for sliding expiration calculation (last_accessed_time + 2 weeks).
    """





default_message_pool.register_message("memos.api.v1", "CreateSessionResponse", CreateSessionResponse)


@dataclass(eq=False, repr=False)
class CreateShortcutRequest(betterproto2.Message):


    parent: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The parent resource where this shortcut will be created.
    Format: users/{user}
    """

    shortcut: "Shortcut | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Required. The shortcut to create.
    """

    validate_only: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    Optional. If set, validate the request, but do not actually create the shortcut.
    """





default_message_pool.register_message("memos.api.v1", "CreateShortcutRequest", CreateShortcutRequest)


@dataclass(eq=False, repr=False)
class CreateUserAccessTokenRequest(betterproto2.Message):


    parent: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The parent resource where this access token will be created.
    Format: users/{user}
    """

    access_token: "UserAccessToken | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Required. The access token to create.
    """

    access_token_id: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Optional. The access token ID to use.
    """





default_message_pool.register_message("memos.api.v1", "CreateUserAccessTokenRequest", CreateUserAccessTokenRequest)


@dataclass(eq=False, repr=False)
class CreateUserRequest(betterproto2.Message):


    user: "User | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Required. The user to create.
    """

    user_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Optional. The user ID to use for this user.
    If empty, a unique ID will be generated.
    Must match the pattern [a-z0-9-]+
    """

    validate_only: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    Optional. If set, validate the request but don't actually create the user.
    """

    request_id: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    Optional. An idempotency token that can be used to ensure that multiple
    requests to create a user have the same result.
    """





default_message_pool.register_message("memos.api.v1", "CreateUserRequest", CreateUserRequest)


@dataclass(eq=False, repr=False)
class CreateUserWebhookRequest(betterproto2.Message):


    parent: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The parent user resource.
    Format: users/{user}
    """

    webhook: "UserWebhook | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The webhook to create.
    """





default_message_pool.register_message("memos.api.v1", "CreateUserWebhookRequest", CreateUserWebhookRequest)


@dataclass(eq=False, repr=False)
class DeleteAttachmentRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The attachment name of the attachment to delete.
    Format: attachments/{attachment}
    """





default_message_pool.register_message("memos.api.v1", "DeleteAttachmentRequest", DeleteAttachmentRequest)


@dataclass(eq=False, repr=False)
class DeleteIdentityProviderRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The resource name of the identity provider to delete.
    Format: identityProviders/{idp}
    """





default_message_pool.register_message("memos.api.v1", "DeleteIdentityProviderRequest", DeleteIdentityProviderRequest)


@dataclass(eq=False, repr=False)
class DeleteInboxRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The resource name of the inbox to delete.
    Format: inboxes/{inbox}
    """





default_message_pool.register_message("memos.api.v1", "DeleteInboxRequest", DeleteInboxRequest)


@dataclass(eq=False, repr=False)
class DeleteMemoReactionRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The resource name of the reaction to delete.
    Format: reactions/{reaction}
    """





default_message_pool.register_message("memos.api.v1", "DeleteMemoReactionRequest", DeleteMemoReactionRequest)


@dataclass(eq=False, repr=False)
class DeleteMemoRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The resource name of the memo to delete.
    Format: memos/{memo}
    """

    force: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    Optional. If set to true, the memo will be deleted even if it has associated data.
    """





default_message_pool.register_message("memos.api.v1", "DeleteMemoRequest", DeleteMemoRequest)


@dataclass(eq=False, repr=False)
class DeleteMemoTagRequest(betterproto2.Message):


    parent: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The parent, who owns the tags.
    Format: memos/{memo}. Use "memos/-" to delete all tags.
    """

    tag: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Required. The tag name to delete.
    """

    delete_related_memos: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    Optional. Whether to delete related memos.
    """





default_message_pool.register_message("memos.api.v1", "DeleteMemoTagRequest", DeleteMemoTagRequest)


@dataclass(eq=False, repr=False)
class DeleteSessionRequest(betterproto2.Message):



    pass



default_message_pool.register_message("memos.api.v1", "DeleteSessionRequest", DeleteSessionRequest)


@dataclass(eq=False, repr=False)
class DeleteShortcutRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The resource name of the shortcut to delete.
    Format: users/{user}/shortcuts/{shortcut}
    """





default_message_pool.register_message("memos.api.v1", "DeleteShortcutRequest", DeleteShortcutRequest)


@dataclass(eq=False, repr=False)
class DeleteUserAccessTokenRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The resource name of the access token to delete.
    Format: users/{user}/accessTokens/{access_token}
    """





default_message_pool.register_message("memos.api.v1", "DeleteUserAccessTokenRequest", DeleteUserAccessTokenRequest)


@dataclass(eq=False, repr=False)
class DeleteUserRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The resource name of the user to delete.
    Format: users/{user}
    """

    force: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    Optional. If set to true, the user will be deleted even if they have associated data.
    """





default_message_pool.register_message("memos.api.v1", "DeleteUserRequest", DeleteUserRequest)


@dataclass(eq=False, repr=False)
class DeleteUserWebhookRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the webhook to delete.
    Format: users/{user}/webhooks/{webhook}
    """





default_message_pool.register_message("memos.api.v1", "DeleteUserWebhookRequest", DeleteUserWebhookRequest)


@dataclass(eq=False, repr=False)
class EmbeddedContentNode(betterproto2.Message):


    resource_name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The resource name of the embedded content.
    """

    params: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Additional parameters for the embedded content.
    """





default_message_pool.register_message("memos.api.v1", "EmbeddedContentNode", EmbeddedContentNode)


@dataclass(eq=False, repr=False)
class EscapingCharacterNode(betterproto2.Message):


    symbol: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)





default_message_pool.register_message("memos.api.v1", "EscapingCharacterNode", EscapingCharacterNode)


@dataclass(eq=False, repr=False)
class FieldMapping(betterproto2.Message):


    identifier: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    display_name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    email: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    avatar_url: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)





default_message_pool.register_message("memos.api.v1", "FieldMapping", FieldMapping)


@dataclass(eq=False, repr=False)
class GetActivityRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the activity.
    Format: activities/{id}, id is the system generated auto-incremented id.
    """





default_message_pool.register_message("memos.api.v1", "GetActivityRequest", GetActivityRequest)


@dataclass(eq=False, repr=False)
class GetAttachmentBinaryRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The attachment name of the attachment.
    Format: attachments/{attachment}
    """

    filename: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The filename of the attachment. Mainly used for downloading.
    """

    thumbnail: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    Optional. A flag indicating if the thumbnail version of the attachment should be returned.
    """





default_message_pool.register_message("memos.api.v1", "GetAttachmentBinaryRequest", GetAttachmentBinaryRequest)


@dataclass(eq=False, repr=False)
class GetAttachmentRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The attachment name of the attachment to retrieve.
    Format: attachments/{attachment}
    """





default_message_pool.register_message("memos.api.v1", "GetAttachmentRequest", GetAttachmentRequest)


@dataclass(eq=False, repr=False)
class GetCurrentSessionRequest(betterproto2.Message):



    pass



default_message_pool.register_message("memos.api.v1", "GetCurrentSessionRequest", GetCurrentSessionRequest)


@dataclass(eq=False, repr=False)
class GetCurrentSessionResponse(betterproto2.Message):


    user: "User | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)

    last_accessed_at: "datetime.datetime | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, unwrap=lambda: ___google__protobuf__.Timestamp, optional=True)
    """
    Last time the session was accessed.
    Used for sliding expiration calculation (last_accessed_time + 2 weeks).
    """





default_message_pool.register_message("memos.api.v1", "GetCurrentSessionResponse", GetCurrentSessionResponse)


@dataclass(eq=False, repr=False)
class GetIdentityProviderRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The resource name of the identity provider to get.
    Format: identityProviders/{idp}
    """





default_message_pool.register_message("memos.api.v1", "GetIdentityProviderRequest", GetIdentityProviderRequest)


@dataclass(eq=False, repr=False)
class GetLinkMetadataRequest(betterproto2.Message):


    link: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The link URL to get metadata for.
    """





default_message_pool.register_message("memos.api.v1", "GetLinkMetadataRequest", GetLinkMetadataRequest)


@dataclass(eq=False, repr=False)
class GetMemoRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The resource name of the memo.
    Format: memos/{memo}
    """

    read_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Optional. The fields to return in the response.
    If not specified, all fields are returned.
    """





default_message_pool.register_message("memos.api.v1", "GetMemoRequest", GetMemoRequest)


@dataclass(eq=False, repr=False)
class GetShortcutRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The resource name of the shortcut to retrieve.
    Format: users/{user}/shortcuts/{shortcut}
    """





default_message_pool.register_message("memos.api.v1", "GetShortcutRequest", GetShortcutRequest)


@dataclass(eq=False, repr=False)
class GetUserAvatarRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The resource name of the user.
    Format: users/{user}
    """





default_message_pool.register_message("memos.api.v1", "GetUserAvatarRequest", GetUserAvatarRequest)


@dataclass(eq=False, repr=False)
class GetUserRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The resource name of the user.
    Format: users/{user}
    """

    read_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Optional. The fields to return in the response.
    If not specified, all fields are returned.
    """





default_message_pool.register_message("memos.api.v1", "GetUserRequest", GetUserRequest)


@dataclass(eq=False, repr=False)
class GetUserSettingRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The resource name of the user setting.
    Format: users/{user}/settings/{setting}
    """





default_message_pool.register_message("memos.api.v1", "GetUserSettingRequest", GetUserSettingRequest)


@dataclass(eq=False, repr=False)
class GetUserStatsRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The resource name of the user.
    Format: users/{user}
    """





default_message_pool.register_message("memos.api.v1", "GetUserStatsRequest", GetUserStatsRequest)


@dataclass(eq=False, repr=False)
class GetWorkspaceProfileRequest(betterproto2.Message):
    """
    Request for workspace profile.
    """



    pass



default_message_pool.register_message("memos.api.v1", "GetWorkspaceProfileRequest", GetWorkspaceProfileRequest)


@dataclass(eq=False, repr=False)
class GetWorkspaceSettingRequest(betterproto2.Message):
    """
    Request message for GetWorkspaceSetting method.
    """


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The resource name of the workspace setting.
    Format: workspace/settings/{setting}
    """





default_message_pool.register_message("memos.api.v1", "GetWorkspaceSettingRequest", GetWorkspaceSettingRequest)


@dataclass(eq=False, repr=False)
class HeadingNode(betterproto2.Message):


    level: "int" = betterproto2.field(1, betterproto2.TYPE_INT32)

    children: "list[Node]" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, repeated=True)





default_message_pool.register_message("memos.api.v1", "HeadingNode", HeadingNode)


@dataclass(eq=False, repr=False)
class HighlightNode(betterproto2.Message):


    content: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)





default_message_pool.register_message("memos.api.v1", "HighlightNode", HighlightNode)


@dataclass(eq=False, repr=False)
class HorizontalRuleNode(betterproto2.Message):


    symbol: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)





default_message_pool.register_message("memos.api.v1", "HorizontalRuleNode", HorizontalRuleNode)


@dataclass(eq=False, repr=False)
class HtmlElementNode(betterproto2.Message):


    tag_name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    attributes: "dict[str, str]" = betterproto2.field(2, betterproto2.TYPE_MAP, map_meta=betterproto2.map_meta(betterproto2.TYPE_STRING, betterproto2.TYPE_STRING))





default_message_pool.register_message("memos.api.v1", "HTMLElementNode", HtmlElementNode)


@dataclass(eq=False, repr=False)
class IdentityProvider(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The resource name of the identity provider.
    Format: identityProviders/{idp}
    """

    type: "IdentityProviderType" = betterproto2.field(2, betterproto2.TYPE_ENUM, default_factory=lambda: IdentityProviderType(0))
    """
    Required. The type of the identity provider.
    """

    title: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Required. The display title of the identity provider.
    """

    identifier_filter: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    Optional. Filter applied to user identifiers.
    """

    config: "IdentityProviderConfig | None" = betterproto2.field(5, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Required. Configuration for the identity provider.
    """





default_message_pool.register_message("memos.api.v1", "IdentityProvider", IdentityProvider)


@dataclass(eq=False, repr=False)
class IdentityProviderConfig(betterproto2.Message):
    """
    

    Oneofs:
        - config: 
    """


    oauth2_config: "OAuth2Config | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True, group="config")





default_message_pool.register_message("memos.api.v1", "IdentityProviderConfig", IdentityProviderConfig)


@dataclass(eq=False, repr=False)
class ImageNode(betterproto2.Message):


    alt_text: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    url: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)





default_message_pool.register_message("memos.api.v1", "ImageNode", ImageNode)


@dataclass(eq=False, repr=False)
class Inbox(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The resource name of the inbox.
    Format: inboxes/{inbox}
    """

    sender: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The sender of the inbox notification.
    Format: users/{user}
    """

    receiver: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    The receiver of the inbox notification.
    Format: users/{user}
    """

    status: "InboxStatus" = betterproto2.field(4, betterproto2.TYPE_ENUM, default_factory=lambda: InboxStatus(0))
    """
    The status of the inbox notification.
    """

    create_time: "datetime.datetime | None" = betterproto2.field(5, betterproto2.TYPE_MESSAGE, unwrap=lambda: ___google__protobuf__.Timestamp, optional=True)
    """
    Output only. The creation timestamp.
    """

    type: "InboxType" = betterproto2.field(6, betterproto2.TYPE_ENUM, default_factory=lambda: InboxType(0))
    """
    The type of the inbox notification.
    """

    activity_id: "int | None" = betterproto2.field(7, betterproto2.TYPE_INT32, optional=True)
    """
    Optional. The activity ID associated with this inbox notification.
    """





default_message_pool.register_message("memos.api.v1", "Inbox", Inbox)


@dataclass(eq=False, repr=False)
class ItalicNode(betterproto2.Message):


    symbol: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    children: "list[Node]" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, repeated=True)





default_message_pool.register_message("memos.api.v1", "ItalicNode", ItalicNode)


@dataclass(eq=False, repr=False)
class LineBreakNode(betterproto2.Message):



    pass



default_message_pool.register_message("memos.api.v1", "LineBreakNode", LineBreakNode)


@dataclass(eq=False, repr=False)
class LinkMetadata(betterproto2.Message):


    title: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The title of the linked page.
    """

    description: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The description of the linked page.
    """

    image: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    The URL of the preview image for the linked page.
    """





default_message_pool.register_message("memos.api.v1", "LinkMetadata", LinkMetadata)


@dataclass(eq=False, repr=False)
class LinkNode(betterproto2.Message):


    content: "list[Node]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)

    url: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)





default_message_pool.register_message("memos.api.v1", "LinkNode", LinkNode)


@dataclass(eq=False, repr=False)
class ListActivitiesRequest(betterproto2.Message):


    page_size: "int" = betterproto2.field(1, betterproto2.TYPE_INT32)
    """
    The maximum number of activities to return.
    The service may return fewer than this value.
    If unspecified, at most 100 activities will be returned.
    The maximum value is 1000; values above 1000 will be coerced to 1000.
    """

    page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A page token, received from a previous `ListActivities` call.
    Provide this to retrieve the subsequent page.
    """





default_message_pool.register_message("memos.api.v1", "ListActivitiesRequest", ListActivitiesRequest)


@dataclass(eq=False, repr=False)
class ListActivitiesResponse(betterproto2.Message):


    activities: "list[Activity]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The activities.
    """

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A token to retrieve the next page of results.
    Pass this value in the page_token field in the subsequent call to `ListActivities`
    method to retrieve the next page of results.
    """





default_message_pool.register_message("memos.api.v1", "ListActivitiesResponse", ListActivitiesResponse)


@dataclass(eq=False, repr=False)
class ListAllUserStatsRequest(betterproto2.Message):
    """
    This endpoint doesn't take any parameters.
    """



    pass



default_message_pool.register_message("memos.api.v1", "ListAllUserStatsRequest", ListAllUserStatsRequest)


@dataclass(eq=False, repr=False)
class ListAllUserStatsResponse(betterproto2.Message):


    stats: "list[UserStats]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The list of user statistics.
    """





default_message_pool.register_message("memos.api.v1", "ListAllUserStatsResponse", ListAllUserStatsResponse)


@dataclass(eq=False, repr=False)
class ListAttachmentsRequest(betterproto2.Message):


    page_size: "int" = betterproto2.field(1, betterproto2.TYPE_INT32)
    """
    Optional. The maximum number of attachments to return.
    The service may return fewer than this value.
    If unspecified, at most 50 attachments will be returned.
    The maximum value is 1000; values above 1000 will be coerced to 1000.
    """

    page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Optional. A page token, received from a previous `ListAttachments` call.
    Provide this to retrieve the subsequent page.
    """

    filter: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Optional. Filter to apply to the list results.
    Example: "type=image/png" or "filename:*.jpg"
    Supported operators: =, !=, <, <=, >, >=, :
    Supported fields: filename, type, size, create_time, memo
    """

    order_by: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    Optional. The order to sort results by.
    Example: "create_time desc" or "filename asc"
    """





default_message_pool.register_message("memos.api.v1", "ListAttachmentsRequest", ListAttachmentsRequest)


@dataclass(eq=False, repr=False)
class ListAttachmentsResponse(betterproto2.Message):


    attachments: "list[Attachment]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The list of attachments.
    """

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A token that can be sent as `page_token` to retrieve the next page.
    If this field is omitted, there are no subsequent pages.
    """

    total_size: "int" = betterproto2.field(3, betterproto2.TYPE_INT32)
    """
    The total count of attachments (may be approximate).
    """





default_message_pool.register_message("memos.api.v1", "ListAttachmentsResponse", ListAttachmentsResponse)


@dataclass(eq=False, repr=False)
class ListIdentityProvidersRequest(betterproto2.Message):



    pass



default_message_pool.register_message("memos.api.v1", "ListIdentityProvidersRequest", ListIdentityProvidersRequest)


@dataclass(eq=False, repr=False)
class ListIdentityProvidersResponse(betterproto2.Message):


    identity_providers: "list[IdentityProvider]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The list of identity providers.
    """





default_message_pool.register_message("memos.api.v1", "ListIdentityProvidersResponse", ListIdentityProvidersResponse)


@dataclass(eq=False, repr=False)
class ListInboxesRequest(betterproto2.Message):


    parent: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The parent resource whose inboxes will be listed.
    Format: users/{user}
    """

    page_size: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    Optional. The maximum number of inboxes to return.
    The service may return fewer than this value.
    If unspecified, at most 50 inboxes will be returned.
    The maximum value is 1000; values above 1000 will be coerced to 1000.
    """

    page_token: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Optional. A page token, received from a previous `ListInboxes` call.
    Provide this to retrieve the subsequent page.
    """

    filter: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    Optional. Filter to apply to the list results.
    Example: "status=UNREAD" or "type=MEMO_COMMENT"
    Supported operators: =, !=
    Supported fields: status, type, sender, create_time
    """

    order_by: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    Optional. The order to sort results by.
    Example: "create_time desc" or "status asc"
    """





default_message_pool.register_message("memos.api.v1", "ListInboxesRequest", ListInboxesRequest)


@dataclass(eq=False, repr=False)
class ListInboxesResponse(betterproto2.Message):


    inboxes: "list[Inbox]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The list of inboxes.
    """

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A token that can be sent as `page_token` to retrieve the next page.
    If this field is omitted, there are no subsequent pages.
    """

    total_size: "int" = betterproto2.field(3, betterproto2.TYPE_INT32)
    """
    The total count of inboxes (may be approximate).
    """





default_message_pool.register_message("memos.api.v1", "ListInboxesResponse", ListInboxesResponse)


@dataclass(eq=False, repr=False)
class ListMemoAttachmentsRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The resource name of the memo.
    Format: memos/{memo}
    """

    page_size: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    Optional. The maximum number of attachments to return.
    """

    page_token: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Optional. A page token for pagination.
    """





default_message_pool.register_message("memos.api.v1", "ListMemoAttachmentsRequest", ListMemoAttachmentsRequest)


@dataclass(eq=False, repr=False)
class ListMemoAttachmentsResponse(betterproto2.Message):


    attachments: "list[Attachment]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The list of attachments.
    """

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A token for the next page of results.
    """

    total_size: "int" = betterproto2.field(3, betterproto2.TYPE_INT32)
    """
    The total count of attachments.
    """





default_message_pool.register_message("memos.api.v1", "ListMemoAttachmentsResponse", ListMemoAttachmentsResponse)


@dataclass(eq=False, repr=False)
class ListMemoCommentsRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The resource name of the memo.
    Format: memos/{memo}
    """

    page_size: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    Optional. The maximum number of comments to return.
    """

    page_token: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Optional. A page token for pagination.
    """

    order_by: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    Optional. The order to sort results by.
    """





default_message_pool.register_message("memos.api.v1", "ListMemoCommentsRequest", ListMemoCommentsRequest)


@dataclass(eq=False, repr=False)
class ListMemoCommentsResponse(betterproto2.Message):


    memos: "list[Memo]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The list of comment memos.
    """

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A token for the next page of results.
    """

    total_size: "int" = betterproto2.field(3, betterproto2.TYPE_INT32)
    """
    The total count of comments.
    """





default_message_pool.register_message("memos.api.v1", "ListMemoCommentsResponse", ListMemoCommentsResponse)


@dataclass(eq=False, repr=False)
class ListMemoReactionsRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The resource name of the memo.
    Format: memos/{memo}
    """

    page_size: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    Optional. The maximum number of reactions to return.
    """

    page_token: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Optional. A page token for pagination.
    """





default_message_pool.register_message("memos.api.v1", "ListMemoReactionsRequest", ListMemoReactionsRequest)


@dataclass(eq=False, repr=False)
class ListMemoReactionsResponse(betterproto2.Message):


    reactions: "list[Reaction]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The list of reactions.
    """

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A token for the next page of results.
    """

    total_size: "int" = betterproto2.field(3, betterproto2.TYPE_INT32)
    """
    The total count of reactions.
    """





default_message_pool.register_message("memos.api.v1", "ListMemoReactionsResponse", ListMemoReactionsResponse)


@dataclass(eq=False, repr=False)
class ListMemoRelationsRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The resource name of the memo.
    Format: memos/{memo}
    """

    page_size: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    Optional. The maximum number of relations to return.
    """

    page_token: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Optional. A page token for pagination.
    """





default_message_pool.register_message("memos.api.v1", "ListMemoRelationsRequest", ListMemoRelationsRequest)


@dataclass(eq=False, repr=False)
class ListMemoRelationsResponse(betterproto2.Message):


    relations: "list[MemoRelation]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The list of relations.
    """

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A token for the next page of results.
    """

    total_size: "int" = betterproto2.field(3, betterproto2.TYPE_INT32)
    """
    The total count of relations.
    """





default_message_pool.register_message("memos.api.v1", "ListMemoRelationsResponse", ListMemoRelationsResponse)


@dataclass(eq=False, repr=False)
class ListMemosRequest(betterproto2.Message):


    page_size: "int" = betterproto2.field(1, betterproto2.TYPE_INT32)
    """
    Optional. The maximum number of memos to return.
    The service may return fewer than this value.
    If unspecified, at most 50 memos will be returned.
    The maximum value is 1000; values above 1000 will be coerced to 1000.
    """

    page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Optional. A page token, received from a previous `ListMemos` call.
    Provide this to retrieve the subsequent page.
    """

    state: "State" = betterproto2.field(3, betterproto2.TYPE_ENUM, default_factory=lambda: State(0))
    """
    Optional. The state of the memos to list.
    Default to `NORMAL`. Set to `ARCHIVED` to list archived memos.
    """

    order_by: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    Optional. The order to sort results by.
    Default to "display_time desc".
    Example: "display_time desc" or "create_time asc"
    """

    filter: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    Optional. Filter to apply to the list results.
    Filter is a CEL expression to filter memos.
    Refer to `Shortcut.filter`.
    """

    show_deleted: "bool" = betterproto2.field(6, betterproto2.TYPE_BOOL)
    """
    Optional. If true, show deleted memos in the response.
    """





default_message_pool.register_message("memos.api.v1", "ListMemosRequest", ListMemosRequest)


@dataclass(eq=False, repr=False)
class ListMemosResponse(betterproto2.Message):


    memos: "list[Memo]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The list of memos.
    """

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A token that can be sent as `page_token` to retrieve the next page.
    If this field is omitted, there are no subsequent pages.
    """

    total_size: "int" = betterproto2.field(3, betterproto2.TYPE_INT32)
    """
    The total count of memos (may be approximate).
    """





default_message_pool.register_message("memos.api.v1", "ListMemosResponse", ListMemosResponse)


@dataclass(eq=False, repr=False)
class ListNode(betterproto2.Message):


    kind: "ListNodeKind" = betterproto2.field(1, betterproto2.TYPE_ENUM, default_factory=lambda: ListNodeKind(0))

    indent: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)

    children: "list[Node]" = betterproto2.field(3, betterproto2.TYPE_MESSAGE, repeated=True)





default_message_pool.register_message("memos.api.v1", "ListNode", ListNode)


@dataclass(eq=False, repr=False)
class ListShortcutsRequest(betterproto2.Message):


    parent: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The parent resource where shortcuts are listed.
    Format: users/{user}
    """





default_message_pool.register_message("memos.api.v1", "ListShortcutsRequest", ListShortcutsRequest)


@dataclass(eq=False, repr=False)
class ListShortcutsResponse(betterproto2.Message):


    shortcuts: "list[Shortcut]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The list of shortcuts.
    """





default_message_pool.register_message("memos.api.v1", "ListShortcutsResponse", ListShortcutsResponse)


@dataclass(eq=False, repr=False)
class ListUserAccessTokensRequest(betterproto2.Message):


    parent: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The parent resource whose access tokens will be listed.
    Format: users/{user}
    """

    page_size: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    Optional. The maximum number of access tokens to return.
    """

    page_token: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Optional. A page token for pagination.
    """





default_message_pool.register_message("memos.api.v1", "ListUserAccessTokensRequest", ListUserAccessTokensRequest)


@dataclass(eq=False, repr=False)
class ListUserAccessTokensResponse(betterproto2.Message):


    access_tokens: "list[UserAccessToken]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The list of access tokens.
    """

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A token for the next page of results.
    """

    total_size: "int" = betterproto2.field(3, betterproto2.TYPE_INT32)
    """
    The total count of access tokens.
    """





default_message_pool.register_message("memos.api.v1", "ListUserAccessTokensResponse", ListUserAccessTokensResponse)


@dataclass(eq=False, repr=False)
class ListUserSessionsRequest(betterproto2.Message):


    parent: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The resource name of the parent.
    Format: users/{user}
    """





default_message_pool.register_message("memos.api.v1", "ListUserSessionsRequest", ListUserSessionsRequest)


@dataclass(eq=False, repr=False)
class ListUserSessionsResponse(betterproto2.Message):


    sessions: "list[UserSession]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The list of user sessions.
    """





default_message_pool.register_message("memos.api.v1", "ListUserSessionsResponse", ListUserSessionsResponse)


@dataclass(eq=False, repr=False)
class ListUserSettingsRequest(betterproto2.Message):
    """
    Request message for ListUserSettings method.
    """


    parent: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The parent resource whose settings will be listed.
    Format: users/{user}
    """

    page_size: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    Optional. The maximum number of settings to return.
    The service may return fewer than this value.
    If unspecified, at most 50 settings will be returned.
    The maximum value is 1000; values above 1000 will be coerced to 1000.
    """

    page_token: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Optional. A page token, received from a previous `ListUserSettings` call.
    Provide this to retrieve the subsequent page.
    """





default_message_pool.register_message("memos.api.v1", "ListUserSettingsRequest", ListUserSettingsRequest)


@dataclass(eq=False, repr=False)
class ListUserSettingsResponse(betterproto2.Message):
    """
    Response message for ListUserSettings method.
    """


    settings: "list[UserSetting]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The list of user settings.
    """

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A token that can be sent as `page_token` to retrieve the next page.
    If this field is omitted, there are no subsequent pages.
    """

    total_size: "int" = betterproto2.field(3, betterproto2.TYPE_INT32)
    """
    The total count of settings (may be approximate).
    """





default_message_pool.register_message("memos.api.v1", "ListUserSettingsResponse", ListUserSettingsResponse)


@dataclass(eq=False, repr=False)
class ListUsersRequest(betterproto2.Message):


    page_size: "int" = betterproto2.field(1, betterproto2.TYPE_INT32)
    """
    Optional. The maximum number of users to return.
    The service may return fewer than this value.
    If unspecified, at most 50 users will be returned.
    The maximum value is 1000; values above 1000 will be coerced to 1000.
    """

    page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Optional. A page token, received from a previous `ListUsers` call.
    Provide this to retrieve the subsequent page.
    """

    filter: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Optional. Filter to apply to the list results.
    Example: "state=ACTIVE" or "role=USER" or "email:@example.com"
    Supported operators: =, !=, <, <=, >, >=, :
    Supported fields: username, email, role, state, create_time, update_time
    """

    show_deleted: "bool" = betterproto2.field(4, betterproto2.TYPE_BOOL)
    """
    Optional. If true, show deleted users in the response.
    """





default_message_pool.register_message("memos.api.v1", "ListUsersRequest", ListUsersRequest)


@dataclass(eq=False, repr=False)
class ListUsersResponse(betterproto2.Message):


    users: "list[User]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The list of users.
    """

    next_page_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A token that can be sent as `page_token` to retrieve the next page.
    If this field is omitted, there are no subsequent pages.
    """

    total_size: "int" = betterproto2.field(3, betterproto2.TYPE_INT32)
    """
    The total count of users (may be approximate).
    """





default_message_pool.register_message("memos.api.v1", "ListUsersResponse", ListUsersResponse)


@dataclass(eq=False, repr=False)
class ListUserWebhooksRequest(betterproto2.Message):


    parent: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The parent user resource.
    Format: users/{user}
    """





default_message_pool.register_message("memos.api.v1", "ListUserWebhooksRequest", ListUserWebhooksRequest)


@dataclass(eq=False, repr=False)
class ListUserWebhooksResponse(betterproto2.Message):


    webhooks: "list[UserWebhook]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The list of webhooks.
    """





default_message_pool.register_message("memos.api.v1", "ListUserWebhooksResponse", ListUserWebhooksResponse)


@dataclass(eq=False, repr=False)
class Location(betterproto2.Message):


    placeholder: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    A placeholder text for the location.
    """

    latitude: "float" = betterproto2.field(2, betterproto2.TYPE_DOUBLE)
    """
    The latitude of the location.
    """

    longitude: "float" = betterproto2.field(3, betterproto2.TYPE_DOUBLE)
    """
    The longitude of the location.
    """





default_message_pool.register_message("memos.api.v1", "Location", Location)


@dataclass(eq=False, repr=False)
class MathBlockNode(betterproto2.Message):


    content: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)





default_message_pool.register_message("memos.api.v1", "MathBlockNode", MathBlockNode)


@dataclass(eq=False, repr=False)
class MathNode(betterproto2.Message):


    content: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)





default_message_pool.register_message("memos.api.v1", "MathNode", MathNode)


@dataclass(eq=False, repr=False)
class Memo(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The resource name of the memo.
    Format: memos/{memo}, memo is the user defined id or uuid.
    """

    state: "State" = betterproto2.field(2, betterproto2.TYPE_ENUM, default_factory=lambda: State(0))
    """
    The state of the memo.
    """

    creator: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    The name of the creator.
    Format: users/{user}
    """

    create_time: "datetime.datetime | None" = betterproto2.field(4, betterproto2.TYPE_MESSAGE, unwrap=lambda: ___google__protobuf__.Timestamp, optional=True)
    """
    Output only. The creation timestamp.
    """

    update_time: "datetime.datetime | None" = betterproto2.field(5, betterproto2.TYPE_MESSAGE, unwrap=lambda: ___google__protobuf__.Timestamp, optional=True)
    """
    Output only. The last update timestamp.
    """

    display_time: "datetime.datetime | None" = betterproto2.field(6, betterproto2.TYPE_MESSAGE, unwrap=lambda: ___google__protobuf__.Timestamp, optional=True)
    """
    The display timestamp of the memo.
    """

    content: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)
    """
    Required. The content of the memo in Markdown format.
    """

    nodes: "list[Node]" = betterproto2.field(8, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    Output only. The parsed nodes from the content.
    """

    visibility: "Visibility" = betterproto2.field(9, betterproto2.TYPE_ENUM, default_factory=lambda: Visibility(0))
    """
    The visibility of the memo.
    """

    tags: "list[str]" = betterproto2.field(10, betterproto2.TYPE_STRING, repeated=True)
    """
    Output only. The tags extracted from the content.
    """

    pinned: "bool" = betterproto2.field(11, betterproto2.TYPE_BOOL)
    """
    Whether the memo is pinned.
    """

    attachments: "list[Attachment]" = betterproto2.field(12, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    Optional. The attachments of the memo.
    """

    relations: "list[MemoRelation]" = betterproto2.field(13, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    Optional. The relations of the memo.
    """

    reactions: "list[Reaction]" = betterproto2.field(14, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    Output only. The reactions to the memo.
    """

    property: "MemoProperty | None" = betterproto2.field(15, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Output only. The computed properties of the memo.
    """

    parent: "str | None" = betterproto2.field(16, betterproto2.TYPE_STRING, optional=True)
    """
    Output only. The name of the parent memo.
    Format: memos/{memo}
    """

    snippet: "str" = betterproto2.field(17, betterproto2.TYPE_STRING)
    """
    Output only. The snippet of the memo content. Plain text only.
    """

    location: "Location | None" = betterproto2.field(18, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Optional. The location of the memo.
    """





default_message_pool.register_message("memos.api.v1", "Memo", Memo)


@dataclass(eq=False, repr=False)
class MemoProperty(betterproto2.Message):
    """
    Computed properties of a memo.
    """


    has_link: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)

    has_task_list: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)

    has_code: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)

    has_incomplete_tasks: "bool" = betterproto2.field(4, betterproto2.TYPE_BOOL)





default_message_pool.register_message("memos.api.v1", "Memo.Property", MemoProperty)


@dataclass(eq=False, repr=False)
class MemoRelation(betterproto2.Message):


    memo: "MemoRelationMemo | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The memo in the relation.
    """

    related_memo: "MemoRelationMemo | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The related memo.
    """

    type: "MemoRelationType" = betterproto2.field(3, betterproto2.TYPE_ENUM, default_factory=lambda: MemoRelationType(0))





default_message_pool.register_message("memos.api.v1", "MemoRelation", MemoRelation)


@dataclass(eq=False, repr=False)
class MemoRelationMemo(betterproto2.Message):
    """
    Memo reference in relations.
    """


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The resource name of the memo.
    Format: memos/{memo}
    """

    snippet: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Output only. The snippet of the memo content. Plain text only.
    """





default_message_pool.register_message("memos.api.v1", "MemoRelation.Memo", MemoRelationMemo)


@dataclass(eq=False, repr=False)
class Node(betterproto2.Message):
    """
    

    Oneofs:
        - node: 
    """


    type: "NodeType" = betterproto2.field(1, betterproto2.TYPE_ENUM, default_factory=lambda: NodeType(0))

    line_break_node: "LineBreakNode | None" = betterproto2.field(11, betterproto2.TYPE_MESSAGE, optional=True, group="node")
    """
    Block nodes.
    """

    paragraph_node: "ParagraphNode | None" = betterproto2.field(12, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    code_block_node: "CodeBlockNode | None" = betterproto2.field(13, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    heading_node: "HeadingNode | None" = betterproto2.field(14, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    horizontal_rule_node: "HorizontalRuleNode | None" = betterproto2.field(15, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    blockquote_node: "BlockquoteNode | None" = betterproto2.field(16, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    list_node: "ListNode | None" = betterproto2.field(17, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    ordered_list_item_node: "OrderedListItemNode | None" = betterproto2.field(18, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    unordered_list_item_node: "UnorderedListItemNode | None" = betterproto2.field(19, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    task_list_item_node: "TaskListItemNode | None" = betterproto2.field(20, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    math_block_node: "MathBlockNode | None" = betterproto2.field(21, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    table_node: "TableNode | None" = betterproto2.field(22, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    embedded_content_node: "EmbeddedContentNode | None" = betterproto2.field(23, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    text_node: "TextNode | None" = betterproto2.field(51, betterproto2.TYPE_MESSAGE, optional=True, group="node")
    """
    Inline nodes.
    """

    bold_node: "BoldNode | None" = betterproto2.field(52, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    italic_node: "ItalicNode | None" = betterproto2.field(53, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    bold_italic_node: "BoldItalicNode | None" = betterproto2.field(54, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    code_node: "CodeNode | None" = betterproto2.field(55, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    image_node: "ImageNode | None" = betterproto2.field(56, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    link_node: "LinkNode | None" = betterproto2.field(57, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    auto_link_node: "AutoLinkNode | None" = betterproto2.field(58, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    tag_node: "TagNode | None" = betterproto2.field(59, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    strikethrough_node: "StrikethroughNode | None" = betterproto2.field(60, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    escaping_character_node: "EscapingCharacterNode | None" = betterproto2.field(61, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    math_node: "MathNode | None" = betterproto2.field(62, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    highlight_node: "HighlightNode | None" = betterproto2.field(63, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    subscript_node: "SubscriptNode | None" = betterproto2.field(64, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    superscript_node: "SuperscriptNode | None" = betterproto2.field(65, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    referenced_content_node: "ReferencedContentNode | None" = betterproto2.field(66, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    spoiler_node: "SpoilerNode | None" = betterproto2.field(67, betterproto2.TYPE_MESSAGE, optional=True, group="node")

    html_element_node: "HtmlElementNode | None" = betterproto2.field(68, betterproto2.TYPE_MESSAGE, optional=True, group="node")





default_message_pool.register_message("memos.api.v1", "Node", Node)


@dataclass(eq=False, repr=False)
class OAuth2Config(betterproto2.Message):


    client_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    client_secret: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    auth_url: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    token_url: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    user_info_url: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)

    scopes: "list[str]" = betterproto2.field(6, betterproto2.TYPE_STRING, repeated=True)

    field_mapping: "FieldMapping | None" = betterproto2.field(7, betterproto2.TYPE_MESSAGE, optional=True)





default_message_pool.register_message("memos.api.v1", "OAuth2Config", OAuth2Config)


@dataclass(eq=False, repr=False)
class OrderedListItemNode(betterproto2.Message):


    number: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    indent: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)

    children: "list[Node]" = betterproto2.field(3, betterproto2.TYPE_MESSAGE, repeated=True)





default_message_pool.register_message("memos.api.v1", "OrderedListItemNode", OrderedListItemNode)


@dataclass(eq=False, repr=False)
class PageToken(betterproto2.Message):
    """
    Used internally for obfuscating the page token.
    """


    limit: "int" = betterproto2.field(1, betterproto2.TYPE_INT32)

    offset: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)





default_message_pool.register_message("memos.api.v1", "PageToken", PageToken)


@dataclass(eq=False, repr=False)
class ParagraphNode(betterproto2.Message):


    children: "list[Node]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)





default_message_pool.register_message("memos.api.v1", "ParagraphNode", ParagraphNode)


@dataclass(eq=False, repr=False)
class ParseMarkdownRequest(betterproto2.Message):


    markdown: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The markdown content to parse.
    """





default_message_pool.register_message("memos.api.v1", "ParseMarkdownRequest", ParseMarkdownRequest)


@dataclass(eq=False, repr=False)
class ParseMarkdownResponse(betterproto2.Message):


    nodes: "list[Node]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The parsed markdown nodes.
    """





default_message_pool.register_message("memos.api.v1", "ParseMarkdownResponse", ParseMarkdownResponse)


@dataclass(eq=False, repr=False)
class Reaction(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The resource name of the reaction.
    Format: reactions/{reaction}
    """

    creator: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The resource name of the creator.
    Format: users/{user}
    """

    content_id: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    The resource name of the content.
    For memo reactions, this should be the memo's resource name.
    Format: memos/{memo}
    """

    reaction_type: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    Required. The type of reaction (e.g., "👍", "❤️", "😄").
    """

    create_time: "datetime.datetime | None" = betterproto2.field(5, betterproto2.TYPE_MESSAGE, unwrap=lambda: ___google__protobuf__.Timestamp, optional=True)
    """
    Output only. The creation timestamp.
    """





default_message_pool.register_message("memos.api.v1", "Reaction", Reaction)


@dataclass(eq=False, repr=False)
class ReferencedContentNode(betterproto2.Message):


    resource_name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The resource name of the referenced content.
    """

    params: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Additional parameters for the referenced content.
    """





default_message_pool.register_message("memos.api.v1", "ReferencedContentNode", ReferencedContentNode)


@dataclass(eq=False, repr=False)
class RenameMemoTagRequest(betterproto2.Message):


    parent: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The parent, who owns the tags.
    Format: memos/{memo}. Use "memos/-" to rename all tags.
    """

    old_tag: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Required. The old tag name to rename.
    """

    new_tag: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Required. The new tag name.
    """





default_message_pool.register_message("memos.api.v1", "RenameMemoTagRequest", RenameMemoTagRequest)


@dataclass(eq=False, repr=False)
class RestoreMarkdownNodesRequest(betterproto2.Message):


    nodes: "list[Node]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The nodes to restore to markdown content.
    """





default_message_pool.register_message("memos.api.v1", "RestoreMarkdownNodesRequest", RestoreMarkdownNodesRequest)


@dataclass(eq=False, repr=False)
class RestoreMarkdownNodesResponse(betterproto2.Message):


    markdown: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The restored markdown content.
    """





default_message_pool.register_message("memos.api.v1", "RestoreMarkdownNodesResponse", RestoreMarkdownNodesResponse)


@dataclass(eq=False, repr=False)
class RevokeUserSessionRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the session to revoke.
    Format: users/{user}/sessions/{session}
    """





default_message_pool.register_message("memos.api.v1", "RevokeUserSessionRequest", RevokeUserSessionRequest)


@dataclass(eq=False, repr=False)
class SetMemoAttachmentsRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The resource name of the memo.
    Format: memos/{memo}
    """

    attachments: "list[Attachment]" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    Required. The attachments to set for the memo.
    """





default_message_pool.register_message("memos.api.v1", "SetMemoAttachmentsRequest", SetMemoAttachmentsRequest)


@dataclass(eq=False, repr=False)
class SetMemoRelationsRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The resource name of the memo.
    Format: memos/{memo}
    """

    relations: "list[MemoRelation]" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    Required. The relations to set for the memo.
    """





default_message_pool.register_message("memos.api.v1", "SetMemoRelationsRequest", SetMemoRelationsRequest)


@dataclass(eq=False, repr=False)
class Shortcut(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The resource name of the shortcut.
    Format: users/{user}/shortcuts/{shortcut}
    """

    title: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The title of the shortcut.
    """

    filter: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    The filter expression for the shortcut.
    """





default_message_pool.register_message("memos.api.v1", "Shortcut", Shortcut)


@dataclass(eq=False, repr=False)
class SpoilerNode(betterproto2.Message):


    content: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)





default_message_pool.register_message("memos.api.v1", "SpoilerNode", SpoilerNode)


@dataclass(eq=False, repr=False)
class StrikethroughNode(betterproto2.Message):


    content: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)





default_message_pool.register_message("memos.api.v1", "StrikethroughNode", StrikethroughNode)


@dataclass(eq=False, repr=False)
class StringifyMarkdownNodesRequest(betterproto2.Message):


    nodes: "list[Node]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The nodes to stringify to plain text.
    """





default_message_pool.register_message("memos.api.v1", "StringifyMarkdownNodesRequest", StringifyMarkdownNodesRequest)


@dataclass(eq=False, repr=False)
class StringifyMarkdownNodesResponse(betterproto2.Message):


    plain_text: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The plain text content.
    """





default_message_pool.register_message("memos.api.v1", "StringifyMarkdownNodesResponse", StringifyMarkdownNodesResponse)


@dataclass(eq=False, repr=False)
class SubscriptNode(betterproto2.Message):


    content: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)





default_message_pool.register_message("memos.api.v1", "SubscriptNode", SubscriptNode)


@dataclass(eq=False, repr=False)
class SuperscriptNode(betterproto2.Message):


    content: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)





default_message_pool.register_message("memos.api.v1", "SuperscriptNode", SuperscriptNode)


@dataclass(eq=False, repr=False)
class TableNode(betterproto2.Message):


    header: "list[Node]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)

    delimiter: "list[str]" = betterproto2.field(2, betterproto2.TYPE_STRING, repeated=True)

    rows: "list[TableNodeRow]" = betterproto2.field(3, betterproto2.TYPE_MESSAGE, repeated=True)





default_message_pool.register_message("memos.api.v1", "TableNode", TableNode)


@dataclass(eq=False, repr=False)
class TableNodeRow(betterproto2.Message):


    cells: "list[Node]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)





default_message_pool.register_message("memos.api.v1", "TableNode.Row", TableNodeRow)


@dataclass(eq=False, repr=False)
class TagNode(betterproto2.Message):


    content: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)





default_message_pool.register_message("memos.api.v1", "TagNode", TagNode)


@dataclass(eq=False, repr=False)
class TaskListItemNode(betterproto2.Message):


    symbol: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    indent: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)

    complete: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)

    children: "list[Node]" = betterproto2.field(4, betterproto2.TYPE_MESSAGE, repeated=True)





default_message_pool.register_message("memos.api.v1", "TaskListItemNode", TaskListItemNode)


@dataclass(eq=False, repr=False)
class TextNode(betterproto2.Message):


    content: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)





default_message_pool.register_message("memos.api.v1", "TextNode", TextNode)


@dataclass(eq=False, repr=False)
class UnorderedListItemNode(betterproto2.Message):


    symbol: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    indent: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)

    children: "list[Node]" = betterproto2.field(3, betterproto2.TYPE_MESSAGE, repeated=True)





default_message_pool.register_message("memos.api.v1", "UnorderedListItemNode", UnorderedListItemNode)


@dataclass(eq=False, repr=False)
class UpdateAttachmentRequest(betterproto2.Message):


    attachment: "Attachment | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Required. The attachment which replaces the attachment on the server.
    """

    update_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Required. The list of fields to update.
    """





default_message_pool.register_message("memos.api.v1", "UpdateAttachmentRequest", UpdateAttachmentRequest)


@dataclass(eq=False, repr=False)
class UpdateIdentityProviderRequest(betterproto2.Message):


    identity_provider: "IdentityProvider | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Required. The identity provider to update.
    """

    update_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Required. The update mask applies to the resource. Only the top level fields of
    IdentityProvider are supported.
    """





default_message_pool.register_message("memos.api.v1", "UpdateIdentityProviderRequest", UpdateIdentityProviderRequest)


@dataclass(eq=False, repr=False)
class UpdateInboxRequest(betterproto2.Message):


    inbox: "Inbox | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Required. The inbox to update.
    """

    update_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Required. The list of fields to update.
    """

    allow_missing: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    Optional. If set to true, allows updating missing fields.
    """





default_message_pool.register_message("memos.api.v1", "UpdateInboxRequest", UpdateInboxRequest)


@dataclass(eq=False, repr=False)
class UpdateMemoRequest(betterproto2.Message):


    memo: "Memo | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Required. The memo to update.
    The `name` field is required.
    """

    update_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Required. The list of fields to update.
    """

    allow_missing: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    Optional. If set to true, allows updating sensitive fields.
    """





default_message_pool.register_message("memos.api.v1", "UpdateMemoRequest", UpdateMemoRequest)


@dataclass(eq=False, repr=False)
class UpdateShortcutRequest(betterproto2.Message):


    shortcut: "Shortcut | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Required. The shortcut resource which replaces the resource on the server.
    """

    update_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Optional. The list of fields to update.
    """





default_message_pool.register_message("memos.api.v1", "UpdateShortcutRequest", UpdateShortcutRequest)


@dataclass(eq=False, repr=False)
class UpdateUserRequest(betterproto2.Message):


    user: "User | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Required. The user to update.
    """

    update_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Required. The list of fields to update.
    """

    allow_missing: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    Optional. If set to true, allows updating sensitive fields.
    """





default_message_pool.register_message("memos.api.v1", "UpdateUserRequest", UpdateUserRequest)


@dataclass(eq=False, repr=False)
class UpdateUserSettingRequest(betterproto2.Message):


    setting: "UserSetting | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Required. The user setting to update.
    """

    update_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Required. The list of fields to update.
    """





default_message_pool.register_message("memos.api.v1", "UpdateUserSettingRequest", UpdateUserSettingRequest)


@dataclass(eq=False, repr=False)
class UpdateUserWebhookRequest(betterproto2.Message):


    webhook: "UserWebhook | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The webhook to update.
    """

    update_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The list of fields to update.
    """





default_message_pool.register_message("memos.api.v1", "UpdateUserWebhookRequest", UpdateUserWebhookRequest)


@dataclass(eq=False, repr=False)
class UpdateWorkspaceSettingRequest(betterproto2.Message):
    """
    Request message for UpdateWorkspaceSetting method.
    """


    setting: "WorkspaceSetting | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The workspace setting resource which replaces the resource on the server.
    """

    update_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The list of fields to update.
    """





default_message_pool.register_message("memos.api.v1", "UpdateWorkspaceSettingRequest", UpdateWorkspaceSettingRequest)


@dataclass(eq=False, repr=False)
class UpsertMemoReactionRequest(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Required. The resource name of the memo.
    Format: memos/{memo}
    """

    reaction: "Reaction | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Required. The reaction to upsert.
    """





default_message_pool.register_message("memos.api.v1", "UpsertMemoReactionRequest", UpsertMemoReactionRequest)


@dataclass(eq=False, repr=False)
class User(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The resource name of the user.
    Format: users/{user}
    """

    role: "UserRole" = betterproto2.field(2, betterproto2.TYPE_ENUM, default_factory=lambda: UserRole(0))
    """
    The role of the user.
    """

    username: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Required. The unique username for login.
    """

    email: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    Optional. The email address of the user.
    """

    display_name: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    Optional. The display name of the user.
    """

    avatar_url: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    Optional. The avatar URL of the user.
    """

    description: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)
    """
    Optional. The description of the user.
    """

    password: "str" = betterproto2.field(8, betterproto2.TYPE_STRING)
    """
    Input only. The password for the user.
    """

    state: "State" = betterproto2.field(9, betterproto2.TYPE_ENUM, default_factory=lambda: State(0))
    """
    The state of the user.
    """

    create_time: "datetime.datetime | None" = betterproto2.field(10, betterproto2.TYPE_MESSAGE, unwrap=lambda: ___google__protobuf__.Timestamp, optional=True)
    """
    Output only. The creation timestamp.
    """

    update_time: "datetime.datetime | None" = betterproto2.field(11, betterproto2.TYPE_MESSAGE, unwrap=lambda: ___google__protobuf__.Timestamp, optional=True)
    """
    Output only. The last update timestamp.
    """





default_message_pool.register_message("memos.api.v1", "User", User)


@dataclass(eq=False, repr=False)
class UserAccessToken(betterproto2.Message):
    """
    User access token message
    """


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The resource name of the access token.
    Format: users/{user}/accessTokens/{access_token}
    """

    access_token: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Output only. The access token value.
    """

    description: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    The description of the access token.
    """

    issued_at: "datetime.datetime | None" = betterproto2.field(4, betterproto2.TYPE_MESSAGE, unwrap=lambda: ___google__protobuf__.Timestamp, optional=True)
    """
    Output only. The issued timestamp.
    """

    expires_at: "datetime.datetime | None" = betterproto2.field(5, betterproto2.TYPE_MESSAGE, unwrap=lambda: ___google__protobuf__.Timestamp, optional=True)
    """
    Optional. The expiration timestamp.
    """





default_message_pool.register_message("memos.api.v1", "UserAccessToken", UserAccessToken)


@dataclass(eq=False, repr=False)
class UserSession(betterproto2.Message):


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The resource name of the session.
    Format: users/{user}/sessions/{session}
    """

    session_id: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The session ID.
    """

    create_time: "datetime.datetime | None" = betterproto2.field(3, betterproto2.TYPE_MESSAGE, unwrap=lambda: ___google__protobuf__.Timestamp, optional=True)
    """
    The timestamp when the session was created.
    """

    last_accessed_time: "datetime.datetime | None" = betterproto2.field(4, betterproto2.TYPE_MESSAGE, unwrap=lambda: ___google__protobuf__.Timestamp, optional=True)
    """
    The timestamp when the session was last accessed.
    Used for sliding expiration calculation (last_accessed_time + 2 weeks).
    """

    client_info: "UserSessionClientInfo | None" = betterproto2.field(5, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Client information associated with this session.
    """





default_message_pool.register_message("memos.api.v1", "UserSession", UserSession)


@dataclass(eq=False, repr=False)
class UserSessionClientInfo(betterproto2.Message):


    user_agent: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    User agent string of the client.
    """

    ip_address: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    IP address of the client.
    """

    device_type: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Optional. Device type (e.g., "mobile", "desktop", "tablet").
    """

    os: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    Optional. Operating system (e.g., "iOS 17.0", "Windows 11").
    """

    browser: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    Optional. Browser name and version (e.g., "Chrome 119.0").
    """





default_message_pool.register_message("memos.api.v1", "UserSession.ClientInfo", UserSessionClientInfo)


@dataclass(eq=False, repr=False)
class UserSetting(betterproto2.Message):
    """
    User settings message

    Oneofs:
        - value: 
    """


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the user setting.
    Format: users/{user}/settings/{setting}, {setting} is the key for the setting.
    For example, "users/123/settings/GENERAL" for general settings.
    """

    general_setting: "UserSettingGeneralSetting | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True, group="value")

    sessions_setting: "UserSettingSessionsSetting | None" = betterproto2.field(3, betterproto2.TYPE_MESSAGE, optional=True, group="value")

    access_tokens_setting: "UserSettingAccessTokensSetting | None" = betterproto2.field(4, betterproto2.TYPE_MESSAGE, optional=True, group="value")

    webhooks_setting: "UserSettingWebhooksSetting | None" = betterproto2.field(5, betterproto2.TYPE_MESSAGE, optional=True, group="value")





default_message_pool.register_message("memos.api.v1", "UserSetting", UserSetting)


@dataclass(eq=False, repr=False)
class UserSettingAccessTokensSetting(betterproto2.Message):
    """
    User access tokens configuration.
    """


    access_tokens: "list[UserAccessToken]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    List of user access tokens.
    """





default_message_pool.register_message("memos.api.v1", "UserSetting.AccessTokensSetting", UserSettingAccessTokensSetting)


@dataclass(eq=False, repr=False)
class UserSettingGeneralSetting(betterproto2.Message):
    """
    General user settings configuration.
    """


    locale: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The preferred locale of the user.
    """

    memo_visibility: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    The default visibility of the memo.
    """

    theme: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    The preferred theme of the user.
    This references a CSS file in the web/public/themes/ directory.
    If not set, the default theme will be used.
    """





default_message_pool.register_message("memos.api.v1", "UserSetting.GeneralSetting", UserSettingGeneralSetting)


@dataclass(eq=False, repr=False)
class UserSettingSessionsSetting(betterproto2.Message):
    """
    User authentication sessions configuration.
    """


    sessions: "list[UserSession]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    List of active user sessions.
    """





default_message_pool.register_message("memos.api.v1", "UserSetting.SessionsSetting", UserSettingSessionsSetting)


@dataclass(eq=False, repr=False)
class UserSettingWebhooksSetting(betterproto2.Message):
    """
    User webhooks configuration.
    """


    webhooks: "list[UserWebhook]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    List of user webhooks.
    """





default_message_pool.register_message("memos.api.v1", "UserSetting.WebhooksSetting", UserSettingWebhooksSetting)


@dataclass(eq=False, repr=False)
class UserStats(betterproto2.Message):
    """
    User statistics messages
    """


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The resource name of the user whose stats these are.
    Format: users/{user}
    """

    memo_display_timestamps: "list[datetime.datetime]" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, unwrap=lambda: ___google__protobuf__.Timestamp, repeated=True)
    """
    The timestamps when the memos were displayed.
    """

    memo_type_stats: "UserStatsMemoTypeStats | None" = betterproto2.field(3, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The stats of memo types.
    """

    tag_count: "dict[str, int]" = betterproto2.field(4, betterproto2.TYPE_MAP, map_meta=betterproto2.map_meta(betterproto2.TYPE_STRING, betterproto2.TYPE_INT32))
    """
    The count of tags.
    """

    pinned_memos: "list[str]" = betterproto2.field(5, betterproto2.TYPE_STRING, repeated=True)
    """
    The pinned memos of the user.
    """

    total_memo_count: "int" = betterproto2.field(6, betterproto2.TYPE_INT32)
    """
    Total memo count.
    """





default_message_pool.register_message("memos.api.v1", "UserStats", UserStats)


@dataclass(eq=False, repr=False)
class UserStatsMemoTypeStats(betterproto2.Message):
    """
    Memo type statistics.
    """


    link_count: "int" = betterproto2.field(1, betterproto2.TYPE_INT32)

    code_count: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)

    todo_count: "int" = betterproto2.field(3, betterproto2.TYPE_INT32)

    undo_count: "int" = betterproto2.field(4, betterproto2.TYPE_INT32)





default_message_pool.register_message("memos.api.v1", "UserStats.MemoTypeStats", UserStatsMemoTypeStats)


@dataclass(eq=False, repr=False)
class UserWebhook(betterproto2.Message):
    """
    UserWebhook represents a webhook owned by a user.
    """


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the webhook.
    Format: users/{user}/webhooks/{webhook}
    """

    url: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The URL to send the webhook to.
    """

    display_name: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Optional. Human-readable name for the webhook.
    """

    create_time: "datetime.datetime | None" = betterproto2.field(4, betterproto2.TYPE_MESSAGE, unwrap=lambda: ___google__protobuf__.Timestamp, optional=True)
    """
    The creation time of the webhook.
    """

    update_time: "datetime.datetime | None" = betterproto2.field(5, betterproto2.TYPE_MESSAGE, unwrap=lambda: ___google__protobuf__.Timestamp, optional=True)
    """
    The last update time of the webhook.
    """





default_message_pool.register_message("memos.api.v1", "UserWebhook", UserWebhook)


@dataclass(eq=False, repr=False)
class WorkspaceProfile(betterproto2.Message):
    """
    Workspace profile message containing basic workspace information.
    """


    owner: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of instance owner.
    Format: users/{user}
    """

    version: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Version is the current version of instance.
    """

    mode: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Mode is the instance mode (e.g. "prod", "dev" or "demo").
    """

    instance_url: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    Instance URL is the URL of the instance.
    """





default_message_pool.register_message("memos.api.v1", "WorkspaceProfile", WorkspaceProfile)


@dataclass(eq=False, repr=False)
class WorkspaceSetting(betterproto2.Message):
    """
    A workspace setting resource.

    Oneofs:
        - value: 
    """


    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the workspace setting.
    Format: workspace/settings/{setting}
    """

    general_setting: "WorkspaceSettingGeneralSetting | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True, group="value")

    storage_setting: "WorkspaceSettingStorageSetting | None" = betterproto2.field(3, betterproto2.TYPE_MESSAGE, optional=True, group="value")

    memo_related_setting: "WorkspaceSettingMemoRelatedSetting | None" = betterproto2.field(4, betterproto2.TYPE_MESSAGE, optional=True, group="value")





default_message_pool.register_message("memos.api.v1", "WorkspaceSetting", WorkspaceSetting)


@dataclass(eq=False, repr=False)
class WorkspaceSettingGeneralSetting(betterproto2.Message):
    """
    General workspace settings configuration.
    """


    theme: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    theme is the name of the selected theme.
    This references a CSS file in the web/public/themes/ directory.
    """

    disallow_user_registration: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    disallow_user_registration disallows user registration.
    """

    disallow_password_auth: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    disallow_password_auth disallows password authentication.
    """

    additional_script: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    additional_script is the additional script.
    """

    additional_style: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    additional_style is the additional style.
    """

    custom_profile: "WorkspaceSettingGeneralSettingCustomProfile | None" = betterproto2.field(6, betterproto2.TYPE_MESSAGE, optional=True)
    """
    custom_profile is the custom profile.
    """

    week_start_day_offset: "int" = betterproto2.field(7, betterproto2.TYPE_INT32)
    """
    week_start_day_offset is the week start day offset from Sunday.
    0: Sunday, 1: Monday, 2: Tuesday, 3: Wednesday, 4: Thursday, 5: Friday, 6: Saturday
    Default is Sunday.
    """

    disallow_change_username: "bool" = betterproto2.field(8, betterproto2.TYPE_BOOL)
    """
    disallow_change_username disallows changing username.
    """

    disallow_change_nickname: "bool" = betterproto2.field(9, betterproto2.TYPE_BOOL)
    """
    disallow_change_nickname disallows changing nickname.
    """





default_message_pool.register_message("memos.api.v1", "WorkspaceSetting.GeneralSetting", WorkspaceSettingGeneralSetting)


@dataclass(eq=False, repr=False)
class WorkspaceSettingGeneralSettingCustomProfile(betterproto2.Message):
    """
    Custom profile configuration for workspace branding.
    """


    title: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    description: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    logo_url: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    locale: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)





default_message_pool.register_message("memos.api.v1", "WorkspaceSetting.GeneralSetting.CustomProfile", WorkspaceSettingGeneralSettingCustomProfile)


@dataclass(eq=False, repr=False)
class WorkspaceSettingMemoRelatedSetting(betterproto2.Message):
    """
    Memo-related workspace settings and policies.
    """


    disallow_public_visibility: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)
    """
    disallow_public_visibility disallows set memo as public visibility.
    """

    display_with_update_time: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    display_with_update_time orders and displays memo with update time.
    """

    content_length_limit: "int" = betterproto2.field(3, betterproto2.TYPE_INT32)
    """
    content_length_limit is the limit of content length. Unit is byte.
    """

    enable_double_click_edit: "bool" = betterproto2.field(4, betterproto2.TYPE_BOOL)
    """
    enable_double_click_edit enables editing on double click.
    """

    enable_link_preview: "bool" = betterproto2.field(5, betterproto2.TYPE_BOOL)
    """
    enable_link_preview enables links preview.
    """

    reactions: "list[str]" = betterproto2.field(7, betterproto2.TYPE_STRING, repeated=True)
    """
    reactions is the list of reactions.
    """

    disable_markdown_shortcuts: "bool" = betterproto2.field(8, betterproto2.TYPE_BOOL)
    """
    disable_markdown_shortcuts disallow the registration of markdown shortcuts.
    """

    enable_blur_nsfw_content: "bool" = betterproto2.field(9, betterproto2.TYPE_BOOL)
    """
    enable_blur_nsfw_content enables blurring of content marked as not safe for work (NSFW).
    """

    nsfw_tags: "list[str]" = betterproto2.field(10, betterproto2.TYPE_STRING, repeated=True)
    """
    nsfw_tags is the list of tags that mark content as NSFW for blurring.
    """





default_message_pool.register_message("memos.api.v1", "WorkspaceSetting.MemoRelatedSetting", WorkspaceSettingMemoRelatedSetting)


@dataclass(eq=False, repr=False)
class WorkspaceSettingStorageSetting(betterproto2.Message):
    """
    Storage configuration settings for workspace attachments.
    """


    storage_type: "WorkspaceSettingStorageSettingStorageType" = betterproto2.field(1, betterproto2.TYPE_ENUM, default_factory=lambda: WorkspaceSettingStorageSettingStorageType(0))
    """
    storage_type is the storage type.
    """

    filepath_template: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The template of file path.
    e.g. assets/{timestamp}_{filename}
    """

    upload_size_limit_mb: "int" = betterproto2.field(3, betterproto2.TYPE_INT64)
    """
    The max upload size in megabytes.
    """

    s3_config: "WorkspaceSettingStorageSettingS3Config | None" = betterproto2.field(4, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The S3 config.
    """





default_message_pool.register_message("memos.api.v1", "WorkspaceSetting.StorageSetting", WorkspaceSettingStorageSetting)


@dataclass(eq=False, repr=False)
class WorkspaceSettingStorageSettingS3Config(betterproto2.Message):
    """
    S3 configuration for cloud storage backend.
    Reference: https://developers.cloudflare.com/r2/examples/aws/aws-sdk-go/
    """


    access_key_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    access_key_secret: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    endpoint: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    region: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    bucket: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)

    use_path_style: "bool" = betterproto2.field(6, betterproto2.TYPE_BOOL)





default_message_pool.register_message("memos.api.v1", "WorkspaceSetting.StorageSetting.S3Config", WorkspaceSettingStorageSettingS3Config)





class ActivityServiceStub(betterproto2.ServiceStub):


    async def list_activities(self, message:"ListActivitiesRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "ListActivitiesResponse":
        """
        ListActivities returns a list of activities.
        """


        return await self._unary_unary(
            "/memos.api.v1.ActivityService/ListActivities",
            message,
            ListActivitiesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_activity(self, message:"GetActivityRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "Activity":
        """
        GetActivity returns the activity with the given id.
        """


        return await self._unary_unary(
            "/memos.api.v1.ActivityService/GetActivity",
            message,
            Activity,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )




class AttachmentServiceStub(betterproto2.ServiceStub):


    async def create_attachment(self, message:"CreateAttachmentRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "Attachment":
        """
        CreateAttachment creates a new attachment.
        """


        return await self._unary_unary(
            "/memos.api.v1.AttachmentService/CreateAttachment",
            message,
            Attachment,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_attachments(self, message:"ListAttachmentsRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "ListAttachmentsResponse":
        """
        ListAttachments lists all attachments.
        """


        return await self._unary_unary(
            "/memos.api.v1.AttachmentService/ListAttachments",
            message,
            ListAttachmentsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_attachment(self, message:"GetAttachmentRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "Attachment":
        """
        GetAttachment returns a attachment by name.
        """


        return await self._unary_unary(
            "/memos.api.v1.AttachmentService/GetAttachment",
            message,
            Attachment,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_attachment_binary(self, message:"GetAttachmentBinaryRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "___google__api__.HttpBody":
        """
        GetAttachmentBinary returns a attachment binary by name.
        """


        return await self._unary_unary(
            "/memos.api.v1.AttachmentService/GetAttachmentBinary",
            message,
            ___google__api__.HttpBody,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_attachment(self, message:"UpdateAttachmentRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "Attachment":
        """
        UpdateAttachment updates a attachment.
        """


        return await self._unary_unary(
            "/memos.api.v1.AttachmentService/UpdateAttachment",
            message,
            Attachment,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_attachment(self, message:"DeleteAttachmentRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "___google__protobuf__.Empty":
        """
        DeleteAttachment deletes a attachment by name.
        """


        return await self._unary_unary(
            "/memos.api.v1.AttachmentService/DeleteAttachment",
            message,
            ___google__protobuf__.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )




class AuthServiceStub(betterproto2.ServiceStub):


    async def get_current_session(self, message:"GetCurrentSessionRequest | None" = None,
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "GetCurrentSessionResponse":
        """
        GetCurrentSession returns the current active session information.
        This method is idempotent and safe, suitable for checking current session state.
        """


        if message is None:
            message = GetCurrentSessionRequest()

        return await self._unary_unary(
            "/memos.api.v1.AuthService/GetCurrentSession",
            message,
            GetCurrentSessionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_session(self, message:"CreateSessionRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "CreateSessionResponse":
        """
        CreateSession authenticates a user and creates a new session.
        Returns the authenticated user information upon successful authentication.
        """


        return await self._unary_unary(
            "/memos.api.v1.AuthService/CreateSession",
            message,
            CreateSessionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_session(self, message:"DeleteSessionRequest | None" = None,
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "___google__protobuf__.Empty":
        """
        DeleteSession terminates the current user session.
        This is an idempotent operation that invalidates the user's authentication.
        """


        if message is None:
            message = DeleteSessionRequest()

        return await self._unary_unary(
            "/memos.api.v1.AuthService/DeleteSession",
            message,
            ___google__protobuf__.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )




class IdentityProviderServiceStub(betterproto2.ServiceStub):


    async def list_identity_providers(self, message:"ListIdentityProvidersRequest | None" = None,
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "ListIdentityProvidersResponse":
        """
        ListIdentityProviders lists identity providers.
        """


        if message is None:
            message = ListIdentityProvidersRequest()

        return await self._unary_unary(
            "/memos.api.v1.IdentityProviderService/ListIdentityProviders",
            message,
            ListIdentityProvidersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_identity_provider(self, message:"GetIdentityProviderRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "IdentityProvider":
        """
        GetIdentityProvider gets an identity provider.
        """


        return await self._unary_unary(
            "/memos.api.v1.IdentityProviderService/GetIdentityProvider",
            message,
            IdentityProvider,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_identity_provider(self, message:"CreateIdentityProviderRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "IdentityProvider":
        """
        CreateIdentityProvider creates an identity provider.
        """


        return await self._unary_unary(
            "/memos.api.v1.IdentityProviderService/CreateIdentityProvider",
            message,
            IdentityProvider,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_identity_provider(self, message:"UpdateIdentityProviderRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "IdentityProvider":
        """
        UpdateIdentityProvider updates an identity provider.
        """


        return await self._unary_unary(
            "/memos.api.v1.IdentityProviderService/UpdateIdentityProvider",
            message,
            IdentityProvider,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_identity_provider(self, message:"DeleteIdentityProviderRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "___google__protobuf__.Empty":
        """
        DeleteIdentityProvider deletes an identity provider.
        """


        return await self._unary_unary(
            "/memos.api.v1.IdentityProviderService/DeleteIdentityProvider",
            message,
            ___google__protobuf__.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )




class InboxServiceStub(betterproto2.ServiceStub):


    async def list_inboxes(self, message:"ListInboxesRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "ListInboxesResponse":
        """
        ListInboxes lists inboxes for a user.
        """


        return await self._unary_unary(
            "/memos.api.v1.InboxService/ListInboxes",
            message,
            ListInboxesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_inbox(self, message:"UpdateInboxRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "Inbox":
        """
        UpdateInbox updates an inbox.
        """


        return await self._unary_unary(
            "/memos.api.v1.InboxService/UpdateInbox",
            message,
            Inbox,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_inbox(self, message:"DeleteInboxRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "___google__protobuf__.Empty":
        """
        DeleteInbox deletes an inbox.
        """


        return await self._unary_unary(
            "/memos.api.v1.InboxService/DeleteInbox",
            message,
            ___google__protobuf__.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )




class MarkdownServiceStub(betterproto2.ServiceStub):


    async def parse_markdown(self, message:"ParseMarkdownRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "ParseMarkdownResponse":
        """
        ParseMarkdown parses the given markdown content and returns a list of nodes.
        This is a utility method that transforms markdown text into structured nodes.
        """


        return await self._unary_unary(
            "/memos.api.v1.MarkdownService/ParseMarkdown",
            message,
            ParseMarkdownResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def restore_markdown_nodes(self, message:"RestoreMarkdownNodesRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "RestoreMarkdownNodesResponse":
        """
        RestoreMarkdownNodes restores the given nodes to markdown content.
        This is the inverse operation of ParseMarkdown.
        """


        return await self._unary_unary(
            "/memos.api.v1.MarkdownService/RestoreMarkdownNodes",
            message,
            RestoreMarkdownNodesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stringify_markdown_nodes(self, message:"StringifyMarkdownNodesRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "StringifyMarkdownNodesResponse":
        """
        StringifyMarkdownNodes stringify the given nodes to plain text content.
        This removes all markdown formatting and returns plain text.
        """


        return await self._unary_unary(
            "/memos.api.v1.MarkdownService/StringifyMarkdownNodes",
            message,
            StringifyMarkdownNodesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_link_metadata(self, message:"GetLinkMetadataRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "LinkMetadata":
        """
        GetLinkMetadata returns metadata for a given link.
        This is useful for generating link previews.
        """


        return await self._unary_unary(
            "/memos.api.v1.MarkdownService/GetLinkMetadata",
            message,
            LinkMetadata,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )




class MemoServiceStub(betterproto2.ServiceStub):


    async def create_memo(self, message:"CreateMemoRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "Memo":
        """
        CreateMemo creates a memo.
        """


        return await self._unary_unary(
            "/memos.api.v1.MemoService/CreateMemo",
            message,
            Memo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_memos(self, message:"ListMemosRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "ListMemosResponse":
        """
        ListMemos lists memos with pagination and filter.
        """


        return await self._unary_unary(
            "/memos.api.v1.MemoService/ListMemos",
            message,
            ListMemosResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_memo(self, message:"GetMemoRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "Memo":
        """
        GetMemo gets a memo.
        """


        return await self._unary_unary(
            "/memos.api.v1.MemoService/GetMemo",
            message,
            Memo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_memo(self, message:"UpdateMemoRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "Memo":
        """
        UpdateMemo updates a memo.
        """


        return await self._unary_unary(
            "/memos.api.v1.MemoService/UpdateMemo",
            message,
            Memo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_memo(self, message:"DeleteMemoRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "___google__protobuf__.Empty":
        """
        DeleteMemo deletes a memo.
        """


        return await self._unary_unary(
            "/memos.api.v1.MemoService/DeleteMemo",
            message,
            ___google__protobuf__.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def rename_memo_tag(self, message:"RenameMemoTagRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "___google__protobuf__.Empty":
        """
        RenameMemoTag renames a tag for a memo.
        """


        return await self._unary_unary(
            "/memos.api.v1.MemoService/RenameMemoTag",
            message,
            ___google__protobuf__.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_memo_tag(self, message:"DeleteMemoTagRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "___google__protobuf__.Empty":
        """
        DeleteMemoTag deletes a tag for a memo.
        """


        return await self._unary_unary(
            "/memos.api.v1.MemoService/DeleteMemoTag",
            message,
            ___google__protobuf__.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_memo_attachments(self, message:"SetMemoAttachmentsRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "___google__protobuf__.Empty":
        """
        SetMemoAttachments sets attachments for a memo.
        """


        return await self._unary_unary(
            "/memos.api.v1.MemoService/SetMemoAttachments",
            message,
            ___google__protobuf__.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_memo_attachments(self, message:"ListMemoAttachmentsRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "ListMemoAttachmentsResponse":
        """
        ListMemoAttachments lists attachments for a memo.
        """


        return await self._unary_unary(
            "/memos.api.v1.MemoService/ListMemoAttachments",
            message,
            ListMemoAttachmentsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_memo_relations(self, message:"SetMemoRelationsRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "___google__protobuf__.Empty":
        """
        SetMemoRelations sets relations for a memo.
        """


        return await self._unary_unary(
            "/memos.api.v1.MemoService/SetMemoRelations",
            message,
            ___google__protobuf__.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_memo_relations(self, message:"ListMemoRelationsRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "ListMemoRelationsResponse":
        """
        ListMemoRelations lists relations for a memo.
        """


        return await self._unary_unary(
            "/memos.api.v1.MemoService/ListMemoRelations",
            message,
            ListMemoRelationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_memo_comment(self, message:"CreateMemoCommentRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "Memo":
        """
        CreateMemoComment creates a comment for a memo.
        """


        return await self._unary_unary(
            "/memos.api.v1.MemoService/CreateMemoComment",
            message,
            Memo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_memo_comments(self, message:"ListMemoCommentsRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "ListMemoCommentsResponse":
        """
        ListMemoComments lists comments for a memo.
        """


        return await self._unary_unary(
            "/memos.api.v1.MemoService/ListMemoComments",
            message,
            ListMemoCommentsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_memo_reactions(self, message:"ListMemoReactionsRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "ListMemoReactionsResponse":
        """
        ListMemoReactions lists reactions for a memo.
        """


        return await self._unary_unary(
            "/memos.api.v1.MemoService/ListMemoReactions",
            message,
            ListMemoReactionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def upsert_memo_reaction(self, message:"UpsertMemoReactionRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "Reaction":
        """
        UpsertMemoReaction upserts a reaction for a memo.
        """


        return await self._unary_unary(
            "/memos.api.v1.MemoService/UpsertMemoReaction",
            message,
            Reaction,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_memo_reaction(self, message:"DeleteMemoReactionRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "___google__protobuf__.Empty":
        """
        DeleteMemoReaction deletes a reaction for a memo.
        """


        return await self._unary_unary(
            "/memos.api.v1.MemoService/DeleteMemoReaction",
            message,
            ___google__protobuf__.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )




class ShortcutServiceStub(betterproto2.ServiceStub):


    async def list_shortcuts(self, message:"ListShortcutsRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "ListShortcutsResponse":
        """
        ListShortcuts returns a list of shortcuts for a user.
        """


        return await self._unary_unary(
            "/memos.api.v1.ShortcutService/ListShortcuts",
            message,
            ListShortcutsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_shortcut(self, message:"GetShortcutRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "Shortcut":
        """
        GetShortcut gets a shortcut by name.
        """


        return await self._unary_unary(
            "/memos.api.v1.ShortcutService/GetShortcut",
            message,
            Shortcut,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_shortcut(self, message:"CreateShortcutRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "Shortcut":
        """
        CreateShortcut creates a new shortcut for a user.
        """


        return await self._unary_unary(
            "/memos.api.v1.ShortcutService/CreateShortcut",
            message,
            Shortcut,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_shortcut(self, message:"UpdateShortcutRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "Shortcut":
        """
        UpdateShortcut updates a shortcut for a user.
        """


        return await self._unary_unary(
            "/memos.api.v1.ShortcutService/UpdateShortcut",
            message,
            Shortcut,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_shortcut(self, message:"DeleteShortcutRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "___google__protobuf__.Empty":
        """
        DeleteShortcut deletes a shortcut for a user.
        """


        return await self._unary_unary(
            "/memos.api.v1.ShortcutService/DeleteShortcut",
            message,
            ___google__protobuf__.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )




class UserServiceStub(betterproto2.ServiceStub):


    async def list_users(self, message:"ListUsersRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "ListUsersResponse":
        """
        ListUsers returns a list of users.
        """


        return await self._unary_unary(
            "/memos.api.v1.UserService/ListUsers",
            message,
            ListUsersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_user(self, message:"GetUserRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "User":
        """
        GetUser gets a user by name.
        """


        return await self._unary_unary(
            "/memos.api.v1.UserService/GetUser",
            message,
            User,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_user(self, message:"CreateUserRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "User":
        """
        CreateUser creates a new user.
        """


        return await self._unary_unary(
            "/memos.api.v1.UserService/CreateUser",
            message,
            User,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_user(self, message:"UpdateUserRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "User":
        """
        UpdateUser updates a user.
        """


        return await self._unary_unary(
            "/memos.api.v1.UserService/UpdateUser",
            message,
            User,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_user(self, message:"DeleteUserRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "___google__protobuf__.Empty":
        """
        DeleteUser deletes a user.
        """


        return await self._unary_unary(
            "/memos.api.v1.UserService/DeleteUser",
            message,
            ___google__protobuf__.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_user_avatar(self, message:"GetUserAvatarRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "___google__api__.HttpBody":
        """
        GetUserAvatar gets the avatar of a user.
        """


        return await self._unary_unary(
            "/memos.api.v1.UserService/GetUserAvatar",
            message,
            ___google__api__.HttpBody,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_all_user_stats(self, message:"ListAllUserStatsRequest | None" = None,
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "ListAllUserStatsResponse":
        """
        ListAllUserStats returns statistics for all users.
        """


        if message is None:
            message = ListAllUserStatsRequest()

        return await self._unary_unary(
            "/memos.api.v1.UserService/ListAllUserStats",
            message,
            ListAllUserStatsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_user_stats(self, message:"GetUserStatsRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "UserStats":
        """
        GetUserStats returns statistics for a specific user.
        """


        return await self._unary_unary(
            "/memos.api.v1.UserService/GetUserStats",
            message,
            UserStats,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_user_setting(self, message:"GetUserSettingRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "UserSetting":
        """
        GetUserSetting returns the user setting.
        """


        return await self._unary_unary(
            "/memos.api.v1.UserService/GetUserSetting",
            message,
            UserSetting,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_user_setting(self, message:"UpdateUserSettingRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "UserSetting":
        """
        UpdateUserSetting updates the user setting.
        """


        return await self._unary_unary(
            "/memos.api.v1.UserService/UpdateUserSetting",
            message,
            UserSetting,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_user_settings(self, message:"ListUserSettingsRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "ListUserSettingsResponse":
        """
        ListUserSettings returns a list of user settings.
        """


        return await self._unary_unary(
            "/memos.api.v1.UserService/ListUserSettings",
            message,
            ListUserSettingsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_user_access_tokens(self, message:"ListUserAccessTokensRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "ListUserAccessTokensResponse":
        """
        ListUserAccessTokens returns a list of access tokens for a user.
        """


        return await self._unary_unary(
            "/memos.api.v1.UserService/ListUserAccessTokens",
            message,
            ListUserAccessTokensResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_user_access_token(self, message:"CreateUserAccessTokenRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "UserAccessToken":
        """
        CreateUserAccessToken creates a new access token for a user.
        """


        return await self._unary_unary(
            "/memos.api.v1.UserService/CreateUserAccessToken",
            message,
            UserAccessToken,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_user_access_token(self, message:"DeleteUserAccessTokenRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "___google__protobuf__.Empty":
        """
        DeleteUserAccessToken deletes an access token.
        """


        return await self._unary_unary(
            "/memos.api.v1.UserService/DeleteUserAccessToken",
            message,
            ___google__protobuf__.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_user_sessions(self, message:"ListUserSessionsRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "ListUserSessionsResponse":
        """
        ListUserSessions returns a list of active sessions for a user.
        """


        return await self._unary_unary(
            "/memos.api.v1.UserService/ListUserSessions",
            message,
            ListUserSessionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def revoke_user_session(self, message:"RevokeUserSessionRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "___google__protobuf__.Empty":
        """
        RevokeUserSession revokes a specific session for a user.
        """


        return await self._unary_unary(
            "/memos.api.v1.UserService/RevokeUserSession",
            message,
            ___google__protobuf__.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_user_webhooks(self, message:"ListUserWebhooksRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "ListUserWebhooksResponse":
        """
        ListUserWebhooks returns a list of webhooks for a user.
        """


        return await self._unary_unary(
            "/memos.api.v1.UserService/ListUserWebhooks",
            message,
            ListUserWebhooksResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_user_webhook(self, message:"CreateUserWebhookRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "UserWebhook":
        """
        CreateUserWebhook creates a new webhook for a user.
        """


        return await self._unary_unary(
            "/memos.api.v1.UserService/CreateUserWebhook",
            message,
            UserWebhook,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_user_webhook(self, message:"UpdateUserWebhookRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "UserWebhook":
        """
        UpdateUserWebhook updates an existing webhook for a user.
        """


        return await self._unary_unary(
            "/memos.api.v1.UserService/UpdateUserWebhook",
            message,
            UserWebhook,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_user_webhook(self, message:"DeleteUserWebhookRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "___google__protobuf__.Empty":
        """
        DeleteUserWebhook deletes a webhook for a user.
        """


        return await self._unary_unary(
            "/memos.api.v1.UserService/DeleteUserWebhook",
            message,
            ___google__protobuf__.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )




class WorkspaceServiceStub(betterproto2.ServiceStub):


    async def get_workspace_profile(self, message:"GetWorkspaceProfileRequest | None" = None,
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "WorkspaceProfile":
        """
        Gets the workspace profile.
        """


        if message is None:
            message = GetWorkspaceProfileRequest()

        return await self._unary_unary(
            "/memos.api.v1.WorkspaceService/GetWorkspaceProfile",
            message,
            WorkspaceProfile,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_workspace_setting(self, message:"GetWorkspaceSettingRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "WorkspaceSetting":
        """
        Gets a workspace setting.
        """


        return await self._unary_unary(
            "/memos.api.v1.WorkspaceService/GetWorkspaceSetting",
            message,
            WorkspaceSetting,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_workspace_setting(self, message:"UpdateWorkspaceSettingRequest",
            *
            , timeout: "float | None" = None
            , deadline: "Deadline | None" = None
            , metadata: "MetadataLike | None" = None
            ) -> "WorkspaceSetting":
        """
        Updates a workspace setting.
        """


        return await self._unary_unary(
            "/memos.api.v1.WorkspaceService/UpdateWorkspaceSetting",
            message,
            WorkspaceSetting,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )



from ....google import api as ___google__api__
from ....google import protobuf as ___google__protobuf__


class ActivityServiceBase(ServiceBase):

    async def list_activities(self, message: "ListActivitiesRequest") -> "ListActivitiesResponse":
        """
        ListActivities returns a list of activities.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_activity(self, message: "GetActivityRequest") -> "Activity":
        """
        GetActivity returns the activity with the given id.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)


    async def __rpc_list_activities(self, stream: "grpclib.server.Stream[ListActivitiesRequest, ListActivitiesResponse]") -> None:
        request = await stream.recv_message()
        response = await self.list_activities(request)
        await stream.send_message(response)

    async def __rpc_get_activity(self, stream: "grpclib.server.Stream[GetActivityRequest, Activity]") -> None:
        request = await stream.recv_message()
        response = await self.get_activity(request)
        await stream.send_message(response)


    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
        "/memos.api.v1.ActivityService/ListActivities": grpclib.const.Handler(
            self.__rpc_list_activities,
            grpclib.const.Cardinality.UNARY_UNARY,
            ListActivitiesRequest,
            ListActivitiesResponse,
        ),
        "/memos.api.v1.ActivityService/GetActivity": grpclib.const.Handler(
            self.__rpc_get_activity,
            grpclib.const.Cardinality.UNARY_UNARY,
            GetActivityRequest,
            Activity,
        ),
        }

class AttachmentServiceBase(ServiceBase):

    async def create_attachment(self, message: "CreateAttachmentRequest") -> "Attachment":
        """
        CreateAttachment creates a new attachment.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_attachments(self, message: "ListAttachmentsRequest") -> "ListAttachmentsResponse":
        """
        ListAttachments lists all attachments.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_attachment(self, message: "GetAttachmentRequest") -> "Attachment":
        """
        GetAttachment returns a attachment by name.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_attachment_binary(self, message: "GetAttachmentBinaryRequest") -> "___google__api__.HttpBody":
        """
        GetAttachmentBinary returns a attachment binary by name.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_attachment(self, message: "UpdateAttachmentRequest") -> "Attachment":
        """
        UpdateAttachment updates a attachment.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_attachment(self, message: "DeleteAttachmentRequest") -> "___google__protobuf__.Empty":
        """
        DeleteAttachment deletes a attachment by name.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)


    async def __rpc_create_attachment(self, stream: "grpclib.server.Stream[CreateAttachmentRequest, Attachment]") -> None:
        request = await stream.recv_message()
        response = await self.create_attachment(request)
        await stream.send_message(response)

    async def __rpc_list_attachments(self, stream: "grpclib.server.Stream[ListAttachmentsRequest, ListAttachmentsResponse]") -> None:
        request = await stream.recv_message()
        response = await self.list_attachments(request)
        await stream.send_message(response)

    async def __rpc_get_attachment(self, stream: "grpclib.server.Stream[GetAttachmentRequest, Attachment]") -> None:
        request = await stream.recv_message()
        response = await self.get_attachment(request)
        await stream.send_message(response)

    async def __rpc_get_attachment_binary(self, stream: "grpclib.server.Stream[GetAttachmentBinaryRequest, ___google__api__.HttpBody]") -> None:
        request = await stream.recv_message()
        response = await self.get_attachment_binary(request)
        await stream.send_message(response)

    async def __rpc_update_attachment(self, stream: "grpclib.server.Stream[UpdateAttachmentRequest, Attachment]") -> None:
        request = await stream.recv_message()
        response = await self.update_attachment(request)
        await stream.send_message(response)

    async def __rpc_delete_attachment(self, stream: "grpclib.server.Stream[DeleteAttachmentRequest, ___google__protobuf__.Empty]") -> None:
        request = await stream.recv_message()
        response = await self.delete_attachment(request)
        await stream.send_message(response)


    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
        "/memos.api.v1.AttachmentService/CreateAttachment": grpclib.const.Handler(
            self.__rpc_create_attachment,
            grpclib.const.Cardinality.UNARY_UNARY,
            CreateAttachmentRequest,
            Attachment,
        ),
        "/memos.api.v1.AttachmentService/ListAttachments": grpclib.const.Handler(
            self.__rpc_list_attachments,
            grpclib.const.Cardinality.UNARY_UNARY,
            ListAttachmentsRequest,
            ListAttachmentsResponse,
        ),
        "/memos.api.v1.AttachmentService/GetAttachment": grpclib.const.Handler(
            self.__rpc_get_attachment,
            grpclib.const.Cardinality.UNARY_UNARY,
            GetAttachmentRequest,
            Attachment,
        ),
        "/memos.api.v1.AttachmentService/GetAttachmentBinary": grpclib.const.Handler(
            self.__rpc_get_attachment_binary,
            grpclib.const.Cardinality.UNARY_UNARY,
            GetAttachmentBinaryRequest,
            ___google__api__.HttpBody,
        ),
        "/memos.api.v1.AttachmentService/UpdateAttachment": grpclib.const.Handler(
            self.__rpc_update_attachment,
            grpclib.const.Cardinality.UNARY_UNARY,
            UpdateAttachmentRequest,
            Attachment,
        ),
        "/memos.api.v1.AttachmentService/DeleteAttachment": grpclib.const.Handler(
            self.__rpc_delete_attachment,
            grpclib.const.Cardinality.UNARY_UNARY,
            DeleteAttachmentRequest,
            ___google__protobuf__.Empty,
        ),
        }

class AuthServiceBase(ServiceBase):

    async def get_current_session(self, message: "GetCurrentSessionRequest") -> "GetCurrentSessionResponse":
        """
        GetCurrentSession returns the current active session information.
        This method is idempotent and safe, suitable for checking current session state.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_session(self, message: "CreateSessionRequest") -> "CreateSessionResponse":
        """
        CreateSession authenticates a user and creates a new session.
        Returns the authenticated user information upon successful authentication.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_session(self, message: "DeleteSessionRequest") -> "___google__protobuf__.Empty":
        """
        DeleteSession terminates the current user session.
        This is an idempotent operation that invalidates the user's authentication.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)


    async def __rpc_get_current_session(self, stream: "grpclib.server.Stream[GetCurrentSessionRequest, GetCurrentSessionResponse]") -> None:
        request = await stream.recv_message()
        response = await self.get_current_session(request)
        await stream.send_message(response)

    async def __rpc_create_session(self, stream: "grpclib.server.Stream[CreateSessionRequest, CreateSessionResponse]") -> None:
        request = await stream.recv_message()
        response = await self.create_session(request)
        await stream.send_message(response)

    async def __rpc_delete_session(self, stream: "grpclib.server.Stream[DeleteSessionRequest, ___google__protobuf__.Empty]") -> None:
        request = await stream.recv_message()
        response = await self.delete_session(request)
        await stream.send_message(response)


    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
        "/memos.api.v1.AuthService/GetCurrentSession": grpclib.const.Handler(
            self.__rpc_get_current_session,
            grpclib.const.Cardinality.UNARY_UNARY,
            GetCurrentSessionRequest,
            GetCurrentSessionResponse,
        ),
        "/memos.api.v1.AuthService/CreateSession": grpclib.const.Handler(
            self.__rpc_create_session,
            grpclib.const.Cardinality.UNARY_UNARY,
            CreateSessionRequest,
            CreateSessionResponse,
        ),
        "/memos.api.v1.AuthService/DeleteSession": grpclib.const.Handler(
            self.__rpc_delete_session,
            grpclib.const.Cardinality.UNARY_UNARY,
            DeleteSessionRequest,
            ___google__protobuf__.Empty,
        ),
        }

class IdentityProviderServiceBase(ServiceBase):

    async def list_identity_providers(self, message: "ListIdentityProvidersRequest") -> "ListIdentityProvidersResponse":
        """
        ListIdentityProviders lists identity providers.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_identity_provider(self, message: "GetIdentityProviderRequest") -> "IdentityProvider":
        """
        GetIdentityProvider gets an identity provider.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_identity_provider(self, message: "CreateIdentityProviderRequest") -> "IdentityProvider":
        """
        CreateIdentityProvider creates an identity provider.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_identity_provider(self, message: "UpdateIdentityProviderRequest") -> "IdentityProvider":
        """
        UpdateIdentityProvider updates an identity provider.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_identity_provider(self, message: "DeleteIdentityProviderRequest") -> "___google__protobuf__.Empty":
        """
        DeleteIdentityProvider deletes an identity provider.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)


    async def __rpc_list_identity_providers(self, stream: "grpclib.server.Stream[ListIdentityProvidersRequest, ListIdentityProvidersResponse]") -> None:
        request = await stream.recv_message()
        response = await self.list_identity_providers(request)
        await stream.send_message(response)

    async def __rpc_get_identity_provider(self, stream: "grpclib.server.Stream[GetIdentityProviderRequest, IdentityProvider]") -> None:
        request = await stream.recv_message()
        response = await self.get_identity_provider(request)
        await stream.send_message(response)

    async def __rpc_create_identity_provider(self, stream: "grpclib.server.Stream[CreateIdentityProviderRequest, IdentityProvider]") -> None:
        request = await stream.recv_message()
        response = await self.create_identity_provider(request)
        await stream.send_message(response)

    async def __rpc_update_identity_provider(self, stream: "grpclib.server.Stream[UpdateIdentityProviderRequest, IdentityProvider]") -> None:
        request = await stream.recv_message()
        response = await self.update_identity_provider(request)
        await stream.send_message(response)

    async def __rpc_delete_identity_provider(self, stream: "grpclib.server.Stream[DeleteIdentityProviderRequest, ___google__protobuf__.Empty]") -> None:
        request = await stream.recv_message()
        response = await self.delete_identity_provider(request)
        await stream.send_message(response)


    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
        "/memos.api.v1.IdentityProviderService/ListIdentityProviders": grpclib.const.Handler(
            self.__rpc_list_identity_providers,
            grpclib.const.Cardinality.UNARY_UNARY,
            ListIdentityProvidersRequest,
            ListIdentityProvidersResponse,
        ),
        "/memos.api.v1.IdentityProviderService/GetIdentityProvider": grpclib.const.Handler(
            self.__rpc_get_identity_provider,
            grpclib.const.Cardinality.UNARY_UNARY,
            GetIdentityProviderRequest,
            IdentityProvider,
        ),
        "/memos.api.v1.IdentityProviderService/CreateIdentityProvider": grpclib.const.Handler(
            self.__rpc_create_identity_provider,
            grpclib.const.Cardinality.UNARY_UNARY,
            CreateIdentityProviderRequest,
            IdentityProvider,
        ),
        "/memos.api.v1.IdentityProviderService/UpdateIdentityProvider": grpclib.const.Handler(
            self.__rpc_update_identity_provider,
            grpclib.const.Cardinality.UNARY_UNARY,
            UpdateIdentityProviderRequest,
            IdentityProvider,
        ),
        "/memos.api.v1.IdentityProviderService/DeleteIdentityProvider": grpclib.const.Handler(
            self.__rpc_delete_identity_provider,
            grpclib.const.Cardinality.UNARY_UNARY,
            DeleteIdentityProviderRequest,
            ___google__protobuf__.Empty,
        ),
        }

class InboxServiceBase(ServiceBase):

    async def list_inboxes(self, message: "ListInboxesRequest") -> "ListInboxesResponse":
        """
        ListInboxes lists inboxes for a user.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_inbox(self, message: "UpdateInboxRequest") -> "Inbox":
        """
        UpdateInbox updates an inbox.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_inbox(self, message: "DeleteInboxRequest") -> "___google__protobuf__.Empty":
        """
        DeleteInbox deletes an inbox.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)


    async def __rpc_list_inboxes(self, stream: "grpclib.server.Stream[ListInboxesRequest, ListInboxesResponse]") -> None:
        request = await stream.recv_message()
        response = await self.list_inboxes(request)
        await stream.send_message(response)

    async def __rpc_update_inbox(self, stream: "grpclib.server.Stream[UpdateInboxRequest, Inbox]") -> None:
        request = await stream.recv_message()
        response = await self.update_inbox(request)
        await stream.send_message(response)

    async def __rpc_delete_inbox(self, stream: "grpclib.server.Stream[DeleteInboxRequest, ___google__protobuf__.Empty]") -> None:
        request = await stream.recv_message()
        response = await self.delete_inbox(request)
        await stream.send_message(response)


    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
        "/memos.api.v1.InboxService/ListInboxes": grpclib.const.Handler(
            self.__rpc_list_inboxes,
            grpclib.const.Cardinality.UNARY_UNARY,
            ListInboxesRequest,
            ListInboxesResponse,
        ),
        "/memos.api.v1.InboxService/UpdateInbox": grpclib.const.Handler(
            self.__rpc_update_inbox,
            grpclib.const.Cardinality.UNARY_UNARY,
            UpdateInboxRequest,
            Inbox,
        ),
        "/memos.api.v1.InboxService/DeleteInbox": grpclib.const.Handler(
            self.__rpc_delete_inbox,
            grpclib.const.Cardinality.UNARY_UNARY,
            DeleteInboxRequest,
            ___google__protobuf__.Empty,
        ),
        }

class MarkdownServiceBase(ServiceBase):

    async def parse_markdown(self, message: "ParseMarkdownRequest") -> "ParseMarkdownResponse":
        """
        ParseMarkdown parses the given markdown content and returns a list of nodes.
        This is a utility method that transforms markdown text into structured nodes.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def restore_markdown_nodes(self, message: "RestoreMarkdownNodesRequest") -> "RestoreMarkdownNodesResponse":
        """
        RestoreMarkdownNodes restores the given nodes to markdown content.
        This is the inverse operation of ParseMarkdown.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stringify_markdown_nodes(self, message: "StringifyMarkdownNodesRequest") -> "StringifyMarkdownNodesResponse":
        """
        StringifyMarkdownNodes stringify the given nodes to plain text content.
        This removes all markdown formatting and returns plain text.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_link_metadata(self, message: "GetLinkMetadataRequest") -> "LinkMetadata":
        """
        GetLinkMetadata returns metadata for a given link.
        This is useful for generating link previews.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)


    async def __rpc_parse_markdown(self, stream: "grpclib.server.Stream[ParseMarkdownRequest, ParseMarkdownResponse]") -> None:
        request = await stream.recv_message()
        response = await self.parse_markdown(request)
        await stream.send_message(response)

    async def __rpc_restore_markdown_nodes(self, stream: "grpclib.server.Stream[RestoreMarkdownNodesRequest, RestoreMarkdownNodesResponse]") -> None:
        request = await stream.recv_message()
        response = await self.restore_markdown_nodes(request)
        await stream.send_message(response)

    async def __rpc_stringify_markdown_nodes(self, stream: "grpclib.server.Stream[StringifyMarkdownNodesRequest, StringifyMarkdownNodesResponse]") -> None:
        request = await stream.recv_message()
        response = await self.stringify_markdown_nodes(request)
        await stream.send_message(response)

    async def __rpc_get_link_metadata(self, stream: "grpclib.server.Stream[GetLinkMetadataRequest, LinkMetadata]") -> None:
        request = await stream.recv_message()
        response = await self.get_link_metadata(request)
        await stream.send_message(response)


    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
        "/memos.api.v1.MarkdownService/ParseMarkdown": grpclib.const.Handler(
            self.__rpc_parse_markdown,
            grpclib.const.Cardinality.UNARY_UNARY,
            ParseMarkdownRequest,
            ParseMarkdownResponse,
        ),
        "/memos.api.v1.MarkdownService/RestoreMarkdownNodes": grpclib.const.Handler(
            self.__rpc_restore_markdown_nodes,
            grpclib.const.Cardinality.UNARY_UNARY,
            RestoreMarkdownNodesRequest,
            RestoreMarkdownNodesResponse,
        ),
        "/memos.api.v1.MarkdownService/StringifyMarkdownNodes": grpclib.const.Handler(
            self.__rpc_stringify_markdown_nodes,
            grpclib.const.Cardinality.UNARY_UNARY,
            StringifyMarkdownNodesRequest,
            StringifyMarkdownNodesResponse,
        ),
        "/memos.api.v1.MarkdownService/GetLinkMetadata": grpclib.const.Handler(
            self.__rpc_get_link_metadata,
            grpclib.const.Cardinality.UNARY_UNARY,
            GetLinkMetadataRequest,
            LinkMetadata,
        ),
        }

class MemoServiceBase(ServiceBase):

    async def create_memo(self, message: "CreateMemoRequest") -> "Memo":
        """
        CreateMemo creates a memo.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_memos(self, message: "ListMemosRequest") -> "ListMemosResponse":
        """
        ListMemos lists memos with pagination and filter.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_memo(self, message: "GetMemoRequest") -> "Memo":
        """
        GetMemo gets a memo.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_memo(self, message: "UpdateMemoRequest") -> "Memo":
        """
        UpdateMemo updates a memo.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_memo(self, message: "DeleteMemoRequest") -> "___google__protobuf__.Empty":
        """
        DeleteMemo deletes a memo.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def rename_memo_tag(self, message: "RenameMemoTagRequest") -> "___google__protobuf__.Empty":
        """
        RenameMemoTag renames a tag for a memo.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_memo_tag(self, message: "DeleteMemoTagRequest") -> "___google__protobuf__.Empty":
        """
        DeleteMemoTag deletes a tag for a memo.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_memo_attachments(self, message: "SetMemoAttachmentsRequest") -> "___google__protobuf__.Empty":
        """
        SetMemoAttachments sets attachments for a memo.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_memo_attachments(self, message: "ListMemoAttachmentsRequest") -> "ListMemoAttachmentsResponse":
        """
        ListMemoAttachments lists attachments for a memo.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_memo_relations(self, message: "SetMemoRelationsRequest") -> "___google__protobuf__.Empty":
        """
        SetMemoRelations sets relations for a memo.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_memo_relations(self, message: "ListMemoRelationsRequest") -> "ListMemoRelationsResponse":
        """
        ListMemoRelations lists relations for a memo.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_memo_comment(self, message: "CreateMemoCommentRequest") -> "Memo":
        """
        CreateMemoComment creates a comment for a memo.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_memo_comments(self, message: "ListMemoCommentsRequest") -> "ListMemoCommentsResponse":
        """
        ListMemoComments lists comments for a memo.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_memo_reactions(self, message: "ListMemoReactionsRequest") -> "ListMemoReactionsResponse":
        """
        ListMemoReactions lists reactions for a memo.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def upsert_memo_reaction(self, message: "UpsertMemoReactionRequest") -> "Reaction":
        """
        UpsertMemoReaction upserts a reaction for a memo.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_memo_reaction(self, message: "DeleteMemoReactionRequest") -> "___google__protobuf__.Empty":
        """
        DeleteMemoReaction deletes a reaction for a memo.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)


    async def __rpc_create_memo(self, stream: "grpclib.server.Stream[CreateMemoRequest, Memo]") -> None:
        request = await stream.recv_message()
        response = await self.create_memo(request)
        await stream.send_message(response)

    async def __rpc_list_memos(self, stream: "grpclib.server.Stream[ListMemosRequest, ListMemosResponse]") -> None:
        request = await stream.recv_message()
        response = await self.list_memos(request)
        await stream.send_message(response)

    async def __rpc_get_memo(self, stream: "grpclib.server.Stream[GetMemoRequest, Memo]") -> None:
        request = await stream.recv_message()
        response = await self.get_memo(request)
        await stream.send_message(response)

    async def __rpc_update_memo(self, stream: "grpclib.server.Stream[UpdateMemoRequest, Memo]") -> None:
        request = await stream.recv_message()
        response = await self.update_memo(request)
        await stream.send_message(response)

    async def __rpc_delete_memo(self, stream: "grpclib.server.Stream[DeleteMemoRequest, ___google__protobuf__.Empty]") -> None:
        request = await stream.recv_message()
        response = await self.delete_memo(request)
        await stream.send_message(response)

    async def __rpc_rename_memo_tag(self, stream: "grpclib.server.Stream[RenameMemoTagRequest, ___google__protobuf__.Empty]") -> None:
        request = await stream.recv_message()
        response = await self.rename_memo_tag(request)
        await stream.send_message(response)

    async def __rpc_delete_memo_tag(self, stream: "grpclib.server.Stream[DeleteMemoTagRequest, ___google__protobuf__.Empty]") -> None:
        request = await stream.recv_message()
        response = await self.delete_memo_tag(request)
        await stream.send_message(response)

    async def __rpc_set_memo_attachments(self, stream: "grpclib.server.Stream[SetMemoAttachmentsRequest, ___google__protobuf__.Empty]") -> None:
        request = await stream.recv_message()
        response = await self.set_memo_attachments(request)
        await stream.send_message(response)

    async def __rpc_list_memo_attachments(self, stream: "grpclib.server.Stream[ListMemoAttachmentsRequest, ListMemoAttachmentsResponse]") -> None:
        request = await stream.recv_message()
        response = await self.list_memo_attachments(request)
        await stream.send_message(response)

    async def __rpc_set_memo_relations(self, stream: "grpclib.server.Stream[SetMemoRelationsRequest, ___google__protobuf__.Empty]") -> None:
        request = await stream.recv_message()
        response = await self.set_memo_relations(request)
        await stream.send_message(response)

    async def __rpc_list_memo_relations(self, stream: "grpclib.server.Stream[ListMemoRelationsRequest, ListMemoRelationsResponse]") -> None:
        request = await stream.recv_message()
        response = await self.list_memo_relations(request)
        await stream.send_message(response)

    async def __rpc_create_memo_comment(self, stream: "grpclib.server.Stream[CreateMemoCommentRequest, Memo]") -> None:
        request = await stream.recv_message()
        response = await self.create_memo_comment(request)
        await stream.send_message(response)

    async def __rpc_list_memo_comments(self, stream: "grpclib.server.Stream[ListMemoCommentsRequest, ListMemoCommentsResponse]") -> None:
        request = await stream.recv_message()
        response = await self.list_memo_comments(request)
        await stream.send_message(response)

    async def __rpc_list_memo_reactions(self, stream: "grpclib.server.Stream[ListMemoReactionsRequest, ListMemoReactionsResponse]") -> None:
        request = await stream.recv_message()
        response = await self.list_memo_reactions(request)
        await stream.send_message(response)

    async def __rpc_upsert_memo_reaction(self, stream: "grpclib.server.Stream[UpsertMemoReactionRequest, Reaction]") -> None:
        request = await stream.recv_message()
        response = await self.upsert_memo_reaction(request)
        await stream.send_message(response)

    async def __rpc_delete_memo_reaction(self, stream: "grpclib.server.Stream[DeleteMemoReactionRequest, ___google__protobuf__.Empty]") -> None:
        request = await stream.recv_message()
        response = await self.delete_memo_reaction(request)
        await stream.send_message(response)


    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
        "/memos.api.v1.MemoService/CreateMemo": grpclib.const.Handler(
            self.__rpc_create_memo,
            grpclib.const.Cardinality.UNARY_UNARY,
            CreateMemoRequest,
            Memo,
        ),
        "/memos.api.v1.MemoService/ListMemos": grpclib.const.Handler(
            self.__rpc_list_memos,
            grpclib.const.Cardinality.UNARY_UNARY,
            ListMemosRequest,
            ListMemosResponse,
        ),
        "/memos.api.v1.MemoService/GetMemo": grpclib.const.Handler(
            self.__rpc_get_memo,
            grpclib.const.Cardinality.UNARY_UNARY,
            GetMemoRequest,
            Memo,
        ),
        "/memos.api.v1.MemoService/UpdateMemo": grpclib.const.Handler(
            self.__rpc_update_memo,
            grpclib.const.Cardinality.UNARY_UNARY,
            UpdateMemoRequest,
            Memo,
        ),
        "/memos.api.v1.MemoService/DeleteMemo": grpclib.const.Handler(
            self.__rpc_delete_memo,
            grpclib.const.Cardinality.UNARY_UNARY,
            DeleteMemoRequest,
            ___google__protobuf__.Empty,
        ),
        "/memos.api.v1.MemoService/RenameMemoTag": grpclib.const.Handler(
            self.__rpc_rename_memo_tag,
            grpclib.const.Cardinality.UNARY_UNARY,
            RenameMemoTagRequest,
            ___google__protobuf__.Empty,
        ),
        "/memos.api.v1.MemoService/DeleteMemoTag": grpclib.const.Handler(
            self.__rpc_delete_memo_tag,
            grpclib.const.Cardinality.UNARY_UNARY,
            DeleteMemoTagRequest,
            ___google__protobuf__.Empty,
        ),
        "/memos.api.v1.MemoService/SetMemoAttachments": grpclib.const.Handler(
            self.__rpc_set_memo_attachments,
            grpclib.const.Cardinality.UNARY_UNARY,
            SetMemoAttachmentsRequest,
            ___google__protobuf__.Empty,
        ),
        "/memos.api.v1.MemoService/ListMemoAttachments": grpclib.const.Handler(
            self.__rpc_list_memo_attachments,
            grpclib.const.Cardinality.UNARY_UNARY,
            ListMemoAttachmentsRequest,
            ListMemoAttachmentsResponse,
        ),
        "/memos.api.v1.MemoService/SetMemoRelations": grpclib.const.Handler(
            self.__rpc_set_memo_relations,
            grpclib.const.Cardinality.UNARY_UNARY,
            SetMemoRelationsRequest,
            ___google__protobuf__.Empty,
        ),
        "/memos.api.v1.MemoService/ListMemoRelations": grpclib.const.Handler(
            self.__rpc_list_memo_relations,
            grpclib.const.Cardinality.UNARY_UNARY,
            ListMemoRelationsRequest,
            ListMemoRelationsResponse,
        ),
        "/memos.api.v1.MemoService/CreateMemoComment": grpclib.const.Handler(
            self.__rpc_create_memo_comment,
            grpclib.const.Cardinality.UNARY_UNARY,
            CreateMemoCommentRequest,
            Memo,
        ),
        "/memos.api.v1.MemoService/ListMemoComments": grpclib.const.Handler(
            self.__rpc_list_memo_comments,
            grpclib.const.Cardinality.UNARY_UNARY,
            ListMemoCommentsRequest,
            ListMemoCommentsResponse,
        ),
        "/memos.api.v1.MemoService/ListMemoReactions": grpclib.const.Handler(
            self.__rpc_list_memo_reactions,
            grpclib.const.Cardinality.UNARY_UNARY,
            ListMemoReactionsRequest,
            ListMemoReactionsResponse,
        ),
        "/memos.api.v1.MemoService/UpsertMemoReaction": grpclib.const.Handler(
            self.__rpc_upsert_memo_reaction,
            grpclib.const.Cardinality.UNARY_UNARY,
            UpsertMemoReactionRequest,
            Reaction,
        ),
        "/memos.api.v1.MemoService/DeleteMemoReaction": grpclib.const.Handler(
            self.__rpc_delete_memo_reaction,
            grpclib.const.Cardinality.UNARY_UNARY,
            DeleteMemoReactionRequest,
            ___google__protobuf__.Empty,
        ),
        }

class ShortcutServiceBase(ServiceBase):

    async def list_shortcuts(self, message: "ListShortcutsRequest") -> "ListShortcutsResponse":
        """
        ListShortcuts returns a list of shortcuts for a user.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_shortcut(self, message: "GetShortcutRequest") -> "Shortcut":
        """
        GetShortcut gets a shortcut by name.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_shortcut(self, message: "CreateShortcutRequest") -> "Shortcut":
        """
        CreateShortcut creates a new shortcut for a user.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_shortcut(self, message: "UpdateShortcutRequest") -> "Shortcut":
        """
        UpdateShortcut updates a shortcut for a user.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_shortcut(self, message: "DeleteShortcutRequest") -> "___google__protobuf__.Empty":
        """
        DeleteShortcut deletes a shortcut for a user.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)


    async def __rpc_list_shortcuts(self, stream: "grpclib.server.Stream[ListShortcutsRequest, ListShortcutsResponse]") -> None:
        request = await stream.recv_message()
        response = await self.list_shortcuts(request)
        await stream.send_message(response)

    async def __rpc_get_shortcut(self, stream: "grpclib.server.Stream[GetShortcutRequest, Shortcut]") -> None:
        request = await stream.recv_message()
        response = await self.get_shortcut(request)
        await stream.send_message(response)

    async def __rpc_create_shortcut(self, stream: "grpclib.server.Stream[CreateShortcutRequest, Shortcut]") -> None:
        request = await stream.recv_message()
        response = await self.create_shortcut(request)
        await stream.send_message(response)

    async def __rpc_update_shortcut(self, stream: "grpclib.server.Stream[UpdateShortcutRequest, Shortcut]") -> None:
        request = await stream.recv_message()
        response = await self.update_shortcut(request)
        await stream.send_message(response)

    async def __rpc_delete_shortcut(self, stream: "grpclib.server.Stream[DeleteShortcutRequest, ___google__protobuf__.Empty]") -> None:
        request = await stream.recv_message()
        response = await self.delete_shortcut(request)
        await stream.send_message(response)


    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
        "/memos.api.v1.ShortcutService/ListShortcuts": grpclib.const.Handler(
            self.__rpc_list_shortcuts,
            grpclib.const.Cardinality.UNARY_UNARY,
            ListShortcutsRequest,
            ListShortcutsResponse,
        ),
        "/memos.api.v1.ShortcutService/GetShortcut": grpclib.const.Handler(
            self.__rpc_get_shortcut,
            grpclib.const.Cardinality.UNARY_UNARY,
            GetShortcutRequest,
            Shortcut,
        ),
        "/memos.api.v1.ShortcutService/CreateShortcut": grpclib.const.Handler(
            self.__rpc_create_shortcut,
            grpclib.const.Cardinality.UNARY_UNARY,
            CreateShortcutRequest,
            Shortcut,
        ),
        "/memos.api.v1.ShortcutService/UpdateShortcut": grpclib.const.Handler(
            self.__rpc_update_shortcut,
            grpclib.const.Cardinality.UNARY_UNARY,
            UpdateShortcutRequest,
            Shortcut,
        ),
        "/memos.api.v1.ShortcutService/DeleteShortcut": grpclib.const.Handler(
            self.__rpc_delete_shortcut,
            grpclib.const.Cardinality.UNARY_UNARY,
            DeleteShortcutRequest,
            ___google__protobuf__.Empty,
        ),
        }

class UserServiceBase(ServiceBase):

    async def list_users(self, message: "ListUsersRequest") -> "ListUsersResponse":
        """
        ListUsers returns a list of users.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_user(self, message: "GetUserRequest") -> "User":
        """
        GetUser gets a user by name.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_user(self, message: "CreateUserRequest") -> "User":
        """
        CreateUser creates a new user.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_user(self, message: "UpdateUserRequest") -> "User":
        """
        UpdateUser updates a user.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_user(self, message: "DeleteUserRequest") -> "___google__protobuf__.Empty":
        """
        DeleteUser deletes a user.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_user_avatar(self, message: "GetUserAvatarRequest") -> "___google__api__.HttpBody":
        """
        GetUserAvatar gets the avatar of a user.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_all_user_stats(self, message: "ListAllUserStatsRequest") -> "ListAllUserStatsResponse":
        """
        ListAllUserStats returns statistics for all users.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_user_stats(self, message: "GetUserStatsRequest") -> "UserStats":
        """
        GetUserStats returns statistics for a specific user.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_user_setting(self, message: "GetUserSettingRequest") -> "UserSetting":
        """
        GetUserSetting returns the user setting.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_user_setting(self, message: "UpdateUserSettingRequest") -> "UserSetting":
        """
        UpdateUserSetting updates the user setting.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_user_settings(self, message: "ListUserSettingsRequest") -> "ListUserSettingsResponse":
        """
        ListUserSettings returns a list of user settings.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_user_access_tokens(self, message: "ListUserAccessTokensRequest") -> "ListUserAccessTokensResponse":
        """
        ListUserAccessTokens returns a list of access tokens for a user.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_user_access_token(self, message: "CreateUserAccessTokenRequest") -> "UserAccessToken":
        """
        CreateUserAccessToken creates a new access token for a user.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_user_access_token(self, message: "DeleteUserAccessTokenRequest") -> "___google__protobuf__.Empty":
        """
        DeleteUserAccessToken deletes an access token.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_user_sessions(self, message: "ListUserSessionsRequest") -> "ListUserSessionsResponse":
        """
        ListUserSessions returns a list of active sessions for a user.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def revoke_user_session(self, message: "RevokeUserSessionRequest") -> "___google__protobuf__.Empty":
        """
        RevokeUserSession revokes a specific session for a user.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_user_webhooks(self, message: "ListUserWebhooksRequest") -> "ListUserWebhooksResponse":
        """
        ListUserWebhooks returns a list of webhooks for a user.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_user_webhook(self, message: "CreateUserWebhookRequest") -> "UserWebhook":
        """
        CreateUserWebhook creates a new webhook for a user.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_user_webhook(self, message: "UpdateUserWebhookRequest") -> "UserWebhook":
        """
        UpdateUserWebhook updates an existing webhook for a user.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_user_webhook(self, message: "DeleteUserWebhookRequest") -> "___google__protobuf__.Empty":
        """
        DeleteUserWebhook deletes a webhook for a user.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)


    async def __rpc_list_users(self, stream: "grpclib.server.Stream[ListUsersRequest, ListUsersResponse]") -> None:
        request = await stream.recv_message()
        response = await self.list_users(request)
        await stream.send_message(response)

    async def __rpc_get_user(self, stream: "grpclib.server.Stream[GetUserRequest, User]") -> None:
        request = await stream.recv_message()
        response = await self.get_user(request)
        await stream.send_message(response)

    async def __rpc_create_user(self, stream: "grpclib.server.Stream[CreateUserRequest, User]") -> None:
        request = await stream.recv_message()
        response = await self.create_user(request)
        await stream.send_message(response)

    async def __rpc_update_user(self, stream: "grpclib.server.Stream[UpdateUserRequest, User]") -> None:
        request = await stream.recv_message()
        response = await self.update_user(request)
        await stream.send_message(response)

    async def __rpc_delete_user(self, stream: "grpclib.server.Stream[DeleteUserRequest, ___google__protobuf__.Empty]") -> None:
        request = await stream.recv_message()
        response = await self.delete_user(request)
        await stream.send_message(response)

    async def __rpc_get_user_avatar(self, stream: "grpclib.server.Stream[GetUserAvatarRequest, ___google__api__.HttpBody]") -> None:
        request = await stream.recv_message()
        response = await self.get_user_avatar(request)
        await stream.send_message(response)

    async def __rpc_list_all_user_stats(self, stream: "grpclib.server.Stream[ListAllUserStatsRequest, ListAllUserStatsResponse]") -> None:
        request = await stream.recv_message()
        response = await self.list_all_user_stats(request)
        await stream.send_message(response)

    async def __rpc_get_user_stats(self, stream: "grpclib.server.Stream[GetUserStatsRequest, UserStats]") -> None:
        request = await stream.recv_message()
        response = await self.get_user_stats(request)
        await stream.send_message(response)

    async def __rpc_get_user_setting(self, stream: "grpclib.server.Stream[GetUserSettingRequest, UserSetting]") -> None:
        request = await stream.recv_message()
        response = await self.get_user_setting(request)
        await stream.send_message(response)

    async def __rpc_update_user_setting(self, stream: "grpclib.server.Stream[UpdateUserSettingRequest, UserSetting]") -> None:
        request = await stream.recv_message()
        response = await self.update_user_setting(request)
        await stream.send_message(response)

    async def __rpc_list_user_settings(self, stream: "grpclib.server.Stream[ListUserSettingsRequest, ListUserSettingsResponse]") -> None:
        request = await stream.recv_message()
        response = await self.list_user_settings(request)
        await stream.send_message(response)

    async def __rpc_list_user_access_tokens(self, stream: "grpclib.server.Stream[ListUserAccessTokensRequest, ListUserAccessTokensResponse]") -> None:
        request = await stream.recv_message()
        response = await self.list_user_access_tokens(request)
        await stream.send_message(response)

    async def __rpc_create_user_access_token(self, stream: "grpclib.server.Stream[CreateUserAccessTokenRequest, UserAccessToken]") -> None:
        request = await stream.recv_message()
        response = await self.create_user_access_token(request)
        await stream.send_message(response)

    async def __rpc_delete_user_access_token(self, stream: "grpclib.server.Stream[DeleteUserAccessTokenRequest, ___google__protobuf__.Empty]") -> None:
        request = await stream.recv_message()
        response = await self.delete_user_access_token(request)
        await stream.send_message(response)

    async def __rpc_list_user_sessions(self, stream: "grpclib.server.Stream[ListUserSessionsRequest, ListUserSessionsResponse]") -> None:
        request = await stream.recv_message()
        response = await self.list_user_sessions(request)
        await stream.send_message(response)

    async def __rpc_revoke_user_session(self, stream: "grpclib.server.Stream[RevokeUserSessionRequest, ___google__protobuf__.Empty]") -> None:
        request = await stream.recv_message()
        response = await self.revoke_user_session(request)
        await stream.send_message(response)

    async def __rpc_list_user_webhooks(self, stream: "grpclib.server.Stream[ListUserWebhooksRequest, ListUserWebhooksResponse]") -> None:
        request = await stream.recv_message()
        response = await self.list_user_webhooks(request)
        await stream.send_message(response)

    async def __rpc_create_user_webhook(self, stream: "grpclib.server.Stream[CreateUserWebhookRequest, UserWebhook]") -> None:
        request = await stream.recv_message()
        response = await self.create_user_webhook(request)
        await stream.send_message(response)

    async def __rpc_update_user_webhook(self, stream: "grpclib.server.Stream[UpdateUserWebhookRequest, UserWebhook]") -> None:
        request = await stream.recv_message()
        response = await self.update_user_webhook(request)
        await stream.send_message(response)

    async def __rpc_delete_user_webhook(self, stream: "grpclib.server.Stream[DeleteUserWebhookRequest, ___google__protobuf__.Empty]") -> None:
        request = await stream.recv_message()
        response = await self.delete_user_webhook(request)
        await stream.send_message(response)


    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
        "/memos.api.v1.UserService/ListUsers": grpclib.const.Handler(
            self.__rpc_list_users,
            grpclib.const.Cardinality.UNARY_UNARY,
            ListUsersRequest,
            ListUsersResponse,
        ),
        "/memos.api.v1.UserService/GetUser": grpclib.const.Handler(
            self.__rpc_get_user,
            grpclib.const.Cardinality.UNARY_UNARY,
            GetUserRequest,
            User,
        ),
        "/memos.api.v1.UserService/CreateUser": grpclib.const.Handler(
            self.__rpc_create_user,
            grpclib.const.Cardinality.UNARY_UNARY,
            CreateUserRequest,
            User,
        ),
        "/memos.api.v1.UserService/UpdateUser": grpclib.const.Handler(
            self.__rpc_update_user,
            grpclib.const.Cardinality.UNARY_UNARY,
            UpdateUserRequest,
            User,
        ),
        "/memos.api.v1.UserService/DeleteUser": grpclib.const.Handler(
            self.__rpc_delete_user,
            grpclib.const.Cardinality.UNARY_UNARY,
            DeleteUserRequest,
            ___google__protobuf__.Empty,
        ),
        "/memos.api.v1.UserService/GetUserAvatar": grpclib.const.Handler(
            self.__rpc_get_user_avatar,
            grpclib.const.Cardinality.UNARY_UNARY,
            GetUserAvatarRequest,
            ___google__api__.HttpBody,
        ),
        "/memos.api.v1.UserService/ListAllUserStats": grpclib.const.Handler(
            self.__rpc_list_all_user_stats,
            grpclib.const.Cardinality.UNARY_UNARY,
            ListAllUserStatsRequest,
            ListAllUserStatsResponse,
        ),
        "/memos.api.v1.UserService/GetUserStats": grpclib.const.Handler(
            self.__rpc_get_user_stats,
            grpclib.const.Cardinality.UNARY_UNARY,
            GetUserStatsRequest,
            UserStats,
        ),
        "/memos.api.v1.UserService/GetUserSetting": grpclib.const.Handler(
            self.__rpc_get_user_setting,
            grpclib.const.Cardinality.UNARY_UNARY,
            GetUserSettingRequest,
            UserSetting,
        ),
        "/memos.api.v1.UserService/UpdateUserSetting": grpclib.const.Handler(
            self.__rpc_update_user_setting,
            grpclib.const.Cardinality.UNARY_UNARY,
            UpdateUserSettingRequest,
            UserSetting,
        ),
        "/memos.api.v1.UserService/ListUserSettings": grpclib.const.Handler(
            self.__rpc_list_user_settings,
            grpclib.const.Cardinality.UNARY_UNARY,
            ListUserSettingsRequest,
            ListUserSettingsResponse,
        ),
        "/memos.api.v1.UserService/ListUserAccessTokens": grpclib.const.Handler(
            self.__rpc_list_user_access_tokens,
            grpclib.const.Cardinality.UNARY_UNARY,
            ListUserAccessTokensRequest,
            ListUserAccessTokensResponse,
        ),
        "/memos.api.v1.UserService/CreateUserAccessToken": grpclib.const.Handler(
            self.__rpc_create_user_access_token,
            grpclib.const.Cardinality.UNARY_UNARY,
            CreateUserAccessTokenRequest,
            UserAccessToken,
        ),
        "/memos.api.v1.UserService/DeleteUserAccessToken": grpclib.const.Handler(
            self.__rpc_delete_user_access_token,
            grpclib.const.Cardinality.UNARY_UNARY,
            DeleteUserAccessTokenRequest,
            ___google__protobuf__.Empty,
        ),
        "/memos.api.v1.UserService/ListUserSessions": grpclib.const.Handler(
            self.__rpc_list_user_sessions,
            grpclib.const.Cardinality.UNARY_UNARY,
            ListUserSessionsRequest,
            ListUserSessionsResponse,
        ),
        "/memos.api.v1.UserService/RevokeUserSession": grpclib.const.Handler(
            self.__rpc_revoke_user_session,
            grpclib.const.Cardinality.UNARY_UNARY,
            RevokeUserSessionRequest,
            ___google__protobuf__.Empty,
        ),
        "/memos.api.v1.UserService/ListUserWebhooks": grpclib.const.Handler(
            self.__rpc_list_user_webhooks,
            grpclib.const.Cardinality.UNARY_UNARY,
            ListUserWebhooksRequest,
            ListUserWebhooksResponse,
        ),
        "/memos.api.v1.UserService/CreateUserWebhook": grpclib.const.Handler(
            self.__rpc_create_user_webhook,
            grpclib.const.Cardinality.UNARY_UNARY,
            CreateUserWebhookRequest,
            UserWebhook,
        ),
        "/memos.api.v1.UserService/UpdateUserWebhook": grpclib.const.Handler(
            self.__rpc_update_user_webhook,
            grpclib.const.Cardinality.UNARY_UNARY,
            UpdateUserWebhookRequest,
            UserWebhook,
        ),
        "/memos.api.v1.UserService/DeleteUserWebhook": grpclib.const.Handler(
            self.__rpc_delete_user_webhook,
            grpclib.const.Cardinality.UNARY_UNARY,
            DeleteUserWebhookRequest,
            ___google__protobuf__.Empty,
        ),
        }

class WorkspaceServiceBase(ServiceBase):

    async def get_workspace_profile(self, message: "GetWorkspaceProfileRequest") -> "WorkspaceProfile":
        """
        Gets the workspace profile.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_workspace_setting(self, message: "GetWorkspaceSettingRequest") -> "WorkspaceSetting":
        """
        Gets a workspace setting.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_workspace_setting(self, message: "UpdateWorkspaceSettingRequest") -> "WorkspaceSetting":
        """
        Updates a workspace setting.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)


    async def __rpc_get_workspace_profile(self, stream: "grpclib.server.Stream[GetWorkspaceProfileRequest, WorkspaceProfile]") -> None:
        request = await stream.recv_message()
        response = await self.get_workspace_profile(request)
        await stream.send_message(response)

    async def __rpc_get_workspace_setting(self, stream: "grpclib.server.Stream[GetWorkspaceSettingRequest, WorkspaceSetting]") -> None:
        request = await stream.recv_message()
        response = await self.get_workspace_setting(request)
        await stream.send_message(response)

    async def __rpc_update_workspace_setting(self, stream: "grpclib.server.Stream[UpdateWorkspaceSettingRequest, WorkspaceSetting]") -> None:
        request = await stream.recv_message()
        response = await self.update_workspace_setting(request)
        await stream.send_message(response)


    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
        "/memos.api.v1.WorkspaceService/GetWorkspaceProfile": grpclib.const.Handler(
            self.__rpc_get_workspace_profile,
            grpclib.const.Cardinality.UNARY_UNARY,
            GetWorkspaceProfileRequest,
            WorkspaceProfile,
        ),
        "/memos.api.v1.WorkspaceService/GetWorkspaceSetting": grpclib.const.Handler(
            self.__rpc_get_workspace_setting,
            grpclib.const.Cardinality.UNARY_UNARY,
            GetWorkspaceSettingRequest,
            WorkspaceSetting,
        ),
        "/memos.api.v1.WorkspaceService/UpdateWorkspaceSetting": grpclib.const.Handler(
            self.__rpc_update_workspace_setting,
            grpclib.const.Cardinality.UNARY_UNARY,
            UpdateWorkspaceSettingRequest,
            WorkspaceSetting,
        ),
        }

